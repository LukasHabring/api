// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/lorawan/device.proto

package lorawan

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceIdentifier struct {
	// The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
	AppEui []byte `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	// The DevEUI is a unique, 8 byte identifier for the device.
	DevEui               []byte   `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceIdentifier) Reset()      { *m = DeviceIdentifier{} }
func (*DeviceIdentifier) ProtoMessage() {}
func (*DeviceIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba317c30737e475e, []int{0}
}
func (m *DeviceIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceIdentifier.Merge(m, src)
}
func (m *DeviceIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *DeviceIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceIdentifier proto.InternalMessageInfo

func (m *DeviceIdentifier) GetAppEui() []byte {
	if m != nil {
		return m.AppEui
	}
	return nil
}

func (m *DeviceIdentifier) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

type Device struct {
	// The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
	AppEui []byte `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	// The DevEUI is a unique, 8 byte identifier for the device.
	DevEui []byte `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
	DevId string `protobuf:"bytes,4,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	// The DevAddr is a dynamic, 4 byte session address for the device.
	DevAddr []byte `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
	// This key is negotiated during the OTAA join procedure, or statically configured using ABP.
	NwkSKey []byte `protobuf:"bytes,6,opt,name=nwk_s_key,json=nwkSKey,proto3" json:"nwk_s_key,omitempty"`
	// The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
	// This key is negotiated during the OTAA join procedure, or statically configured using ABP.
	AppSKey []byte `protobuf:"bytes,7,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	// The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
	AppKey []byte `protobuf:"bytes,8,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// FCntUp is the uplink frame counter for a device session.
	FCntUp uint32 `protobuf:"varint,9,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// FCntDown is the downlink frame counter for a device session.
	FCntDown uint32 `protobuf:"varint,10,opt,name=f_cnt_down,json=fCntDown,proto3" json:"f_cnt_down,omitempty"`
	// The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
	DisableFCntCheck bool `protobuf:"varint,11,opt,name=disable_f_cnt_check,json=disableFCntCheck,proto3" json:"disable_f_cnt_check,omitempty"`
	// The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
	Uses32BitFCnt bool `protobuf:"varint,12,opt,name=uses32_bit_f_cnt,json=uses32BitFCnt,proto3" json:"uses32_bit_f_cnt,omitempty"`
	// The ActivationContstraints are used to allocate a device address for a device (comma-separated).
	// There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
	ActivationConstraints string `protobuf:"bytes,13,opt,name=activation_constraints,json=activationConstraints,proto3" json:"activation_constraints,omitempty"`
	// The DevNonces that have been used in joins. This field is read-only. Reset the nonces by changing the AppKey.
	UsedDevNonces [][]byte `protobuf:"bytes,14,rep,name=used_dev_nonces,json=usedDevNonces,proto3" json:"used_dev_nonces,omitempty"`
	// The AppNonces that have been used in joins. This field is read-only. Reset the nonces by changing the AppKey.
	UsedAppNonces [][]byte `protobuf:"bytes,15,rep,name=used_app_nonces,json=usedAppNonces,proto3" json:"used_app_nonces,omitempty"`
	// When the device was last seen (Unix nanoseconds)
	LastSeen             int64    `protobuf:"varint,21,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()      { *m = Device{} }
func (*Device) ProtoMessage() {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba317c30737e475e, []int{1}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetAppEui() []byte {
	if m != nil {
		return m.AppEui
	}
	return nil
}

func (m *Device) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *Device) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Device) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *Device) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *Device) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *Device) GetAppSKey() []byte {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

func (m *Device) GetAppKey() []byte {
	if m != nil {
		return m.AppKey
	}
	return nil
}

func (m *Device) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *Device) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *Device) GetDisableFCntCheck() bool {
	if m != nil {
		return m.DisableFCntCheck
	}
	return false
}

func (m *Device) GetUses32BitFCnt() bool {
	if m != nil {
		return m.Uses32BitFCnt
	}
	return false
}

func (m *Device) GetActivationConstraints() string {
	if m != nil {
		return m.ActivationConstraints
	}
	return ""
}

func (m *Device) GetUsedDevNonces() [][]byte {
	if m != nil {
		return m.UsedDevNonces
	}
	return nil
}

func (m *Device) GetUsedAppNonces() [][]byte {
	if m != nil {
		return m.UsedAppNonces
	}
	return nil
}

func (m *Device) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceIdentifier)(nil), "lorawan.DeviceIdentifier")
	golang_proto.RegisterType((*DeviceIdentifier)(nil), "lorawan.DeviceIdentifier")
	proto.RegisterType((*Device)(nil), "lorawan.Device")
	golang_proto.RegisterType((*Device)(nil), "lorawan.Device")
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/device.proto", fileDescriptor_ba317c30737e475e)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/device.proto", fileDescriptor_ba317c30737e475e)
}

var fileDescriptor_ba317c30737e475e = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x3d, 0x4c, 0xdb, 0x40,
	0x18, 0x86, 0x7d, 0xfc, 0x84, 0xe4, 0x9a, 0x14, 0xe4, 0x0a, 0x6a, 0x42, 0x75, 0x8a, 0x50, 0xd5,
	0xa6, 0x43, 0x9d, 0x0a, 0x5a, 0x75, 0xea, 0x10, 0x12, 0x5a, 0x45, 0x6d, 0x51, 0x14, 0xa8, 0x2a,
	0x75, 0xb1, 0x2e, 0xbe, 0x4b, 0x72, 0x4a, 0x38, 0x9f, 0xec, 0x73, 0x22, 0x36, 0x46, 0xa6, 0xaa,
	0x63, 0xc7, 0x8e, 0xa8, 0x13, 0x23, 0x23, 0xdd, 0x18, 0x19, 0x19, 0x89, 0xbd, 0x30, 0x32, 0x32,
	0x56, 0xe7, 0x33, 0x20, 0x45, 0xaa, 0x2a, 0xd6, 0xf7, 0x79, 0xbe, 0xcf, 0xf6, 0xe9, 0x3d, 0xc3,
	0x77, 0x5d, 0x26, 0x7b, 0x61, 0xdb, 0x76, 0xbd, 0xdd, 0xca, 0x4e, 0x8f, 0xee, 0xf4, 0x18, 0xef,
	0x06, 0x5b, 0x54, 0x8e, 0x3c, 0xbf, 0x5f, 0xc1, 0x82, 0x55, 0x84, 0xef, 0x49, 0xcf, 0xf5, 0x06,
	0x95, 0x81, 0xe7, 0xe3, 0x11, 0xe6, 0x15, 0x42, 0x87, 0xcc, 0xa5, 0x76, 0x92, 0x9b, 0x73, 0x69,
	0x5a, 0x5c, 0xe9, 0x7a, 0x5e, 0x77, 0x40, 0xb5, 0xde, 0x0e, 0x3b, 0x15, 0xba, 0x2b, 0xe4, 0x9e,
	0xb6, 0x56, 0xeb, 0x70, 0xa1, 0x9e, 0x4c, 0x35, 0x08, 0xe5, 0x92, 0x75, 0x18, 0xf5, 0xcd, 0xc7,
	0x70, 0x0e, 0x0b, 0xe1, 0xd0, 0x90, 0x59, 0xa0, 0x04, 0xca, 0xf9, 0x56, 0x06, 0x0b, 0xb1, 0x19,
	0x32, 0x05, 0x08, 0x1d, 0x26, 0x60, 0x4a, 0x03, 0x42, 0x87, 0x9b, 0x21, 0x5b, 0x3d, 0x98, 0x81,
	0x19, 0xbd, 0xe6, 0xfe, 0xc3, 0xe6, 0x22, 0x54, 0x8a, 0xc3, 0x88, 0x35, 0x5d, 0x02, 0xe5, 0x5c,
	0x6b, 0x16, 0x0b, 0xd1, 0x20, 0x2a, 0x56, 0x3e, 0x23, 0xd6, 0x8c, 0x8e, 0x09, 0x1d, 0x36, 0x88,
	0xb9, 0x0c, 0xb3, 0x2a, 0xc6, 0x84, 0xf8, 0xd6, 0x6c, 0xb2, 0x47, 0xad, 0xad, 0x12, 0xe2, 0x9b,
	0x45, 0x98, 0xe3, 0xa3, 0xbe, 0x13, 0x38, 0x7d, 0xba, 0x67, 0x65, 0x34, 0xe3, 0xa3, 0xfe, 0xf6,
	0x47, 0xba, 0xa7, 0x98, 0x7a, 0x88, 0x66, 0x73, 0x9a, 0x61, 0x21, 0x12, 0x96, 0xbe, 0xb2, 0x22,
	0xd9, 0xdb, 0x57, 0x56, 0xc0, 0x82, 0xd9, 0x8e, 0xe3, 0x72, 0xe9, 0x84, 0xc2, 0xca, 0x95, 0x40,
	0xb9, 0xd0, 0xca, 0x74, 0x6a, 0x5c, 0x7e, 0x11, 0xe6, 0x13, 0x08, 0x35, 0x21, 0xde, 0x88, 0x5b,
	0x30, 0x61, 0x59, 0xc5, 0xea, 0xde, 0x88, 0x9b, 0x2f, 0xe1, 0x23, 0xc2, 0x02, 0xdc, 0x1e, 0x50,
	0x47, 0x5b, 0x6e, 0x8f, 0xba, 0x7d, 0xeb, 0x41, 0x09, 0x94, 0xb3, 0xad, 0x85, 0x14, 0xbd, 0xaf,
	0x71, 0x59, 0x53, 0xb9, 0xf9, 0x1c, 0x2e, 0x84, 0x01, 0x0d, 0xd6, 0xd7, 0x9c, 0x36, 0x93, 0x7a,
	0xc2, 0xca, 0x27, 0x6e, 0x41, 0xe7, 0x1b, 0x4c, 0x2a, 0xdb, 0x7c, 0x03, 0x97, 0xb0, 0x2b, 0xd9,
	0x10, 0x4b, 0xe6, 0x71, 0xc7, 0xf5, 0x78, 0x20, 0x7d, 0xcc, 0xb8, 0x0c, 0xac, 0x42, 0x72, 0x44,
	0x8b, 0x77, 0xb4, 0x76, 0x07, 0xcd, 0x67, 0x70, 0x3e, 0x0c, 0x28, 0x71, 0xd4, 0xb9, 0x71, 0x8f,
	0xbb, 0x34, 0xb0, 0x1e, 0x96, 0xa6, 0xcb, 0xf9, 0x64, 0x3d, 0xa9, 0xd3, 0xe1, 0x56, 0x12, 0xde,
	0x7a, 0xea, 0x30, 0x52, 0x6f, 0xfe, 0xce, 0xab, 0x0a, 0x91, 0x7a, 0x2b, 0x30, 0x37, 0xc0, 0x81,
	0x74, 0x02, 0x4a, 0xb9, 0xb5, 0x58, 0x02, 0xe5, 0xe9, 0x56, 0x56, 0x05, 0xdb, 0x94, 0xf2, 0xb5,
	0x3f, 0x00, 0x16, 0x74, 0x15, 0x3e, 0x63, 0x8e, 0xbb, 0xd4, 0x37, 0xdf, 0xc2, 0xdc, 0x07, 0x2a,
	0xd3, 0x7a, 0x2c, 0xdb, 0x69, 0x2d, 0xed, 0xc9, 0xda, 0x15, 0xe7, 0x27, 0x90, 0xf9, 0x1a, 0xe6,
	0xb6, 0x6f, 0x07, 0x27, 0x69, 0x71, 0xc9, 0xd6, 0xbd, 0xb6, 0x6f, 0x7a, 0x6d, 0x6f, 0xaa, 0x5e,
	0x9b, 0x55, 0x98, 0xaf, 0xd3, 0x01, 0x95, 0xf4, 0xff, 0x4f, 0xfc, 0xc7, 0x8a, 0x8d, 0xef, 0x53,
	0xa7, 0x63, 0x04, 0xce, 0xc6, 0x08, 0x9c, 0x8f, 0x91, 0x71, 0x31, 0x46, 0xc6, 0xe5, 0x18, 0x19,
	0x57, 0x63, 0x64, 0x5c, 0x8f, 0x11, 0xd8, 0x8f, 0x10, 0x38, 0x88, 0x90, 0x71, 0x18, 0x21, 0x70,
	0x14, 0x21, 0xe3, 0x38, 0x42, 0xc6, 0x49, 0x84, 0x8c, 0xd3, 0x08, 0x81, 0xb3, 0x08, 0x81, 0xf3,
	0x08, 0x19, 0x17, 0x11, 0x02, 0x97, 0x11, 0x32, 0xae, 0x22, 0x04, 0xae, 0x23, 0x64, 0xec, 0xc7,
	0xc8, 0x38, 0x88, 0x11, 0xf8, 0x11, 0x23, 0xe3, 0x67, 0x8c, 0xc0, 0xaf, 0x18, 0x19, 0x87, 0x31,
	0x32, 0x8e, 0x62, 0x04, 0x8e, 0x63, 0x04, 0x4e, 0x62, 0x04, 0xe0, 0x0b, 0xcf, 0xef, 0xda, 0xb2,
	0x47, 0x65, 0x72, 0xd3, 0xb9, 0xbe, 0xe9, 0x36, 0x16, 0xcc, 0xbe, 0xb9, 0xe9, 0x37, 0x9f, 0xb2,
	0x61, 0x7e, 0xf2, 0x5a, 0xf8, 0x6b, 0x75, 0x4b, 0x7f, 0x52, 0x53, 0xe1, 0x26, 0xf8, 0xf6, 0xea,
	0xbe, 0x7f, 0x8c, 0xdf, 0x53, 0x4f, 0x27, 0x3d, 0xbb, 0xda, 0x6c, 0xd8, 0xe9, 0xf6, 0x66, 0xaa,
	0xb7, 0x33, 0xc9, 0xe0, 0xfa, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x15, 0xb6, 0xa7, 0x93,
	0x04, 0x00, 0x00,
}

func (this *DeviceIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceIdentifier)
	if !ok {
		that2, ok := that.(DeviceIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AppEui, that1.AppEui) {
		return false
	}
	if !bytes.Equal(this.DevEui, that1.DevEui) {
		return false
	}
	return true
}
func (this *Device) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Device)
	if !ok {
		that2, ok := that.(Device)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AppEui, that1.AppEui) {
		return false
	}
	if !bytes.Equal(this.DevEui, that1.DevEui) {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.DevId != that1.DevId {
		return false
	}
	if !bytes.Equal(this.DevAddr, that1.DevAddr) {
		return false
	}
	if !bytes.Equal(this.NwkSKey, that1.NwkSKey) {
		return false
	}
	if !bytes.Equal(this.AppSKey, that1.AppSKey) {
		return false
	}
	if !bytes.Equal(this.AppKey, that1.AppKey) {
		return false
	}
	if this.FCntUp != that1.FCntUp {
		return false
	}
	if this.FCntDown != that1.FCntDown {
		return false
	}
	if this.DisableFCntCheck != that1.DisableFCntCheck {
		return false
	}
	if this.Uses32BitFCnt != that1.Uses32BitFCnt {
		return false
	}
	if this.ActivationConstraints != that1.ActivationConstraints {
		return false
	}
	if len(this.UsedDevNonces) != len(that1.UsedDevNonces) {
		return false
	}
	for i := range this.UsedDevNonces {
		if !bytes.Equal(this.UsedDevNonces[i], that1.UsedDevNonces[i]) {
			return false
		}
	}
	if len(this.UsedAppNonces) != len(that1.UsedAppNonces) {
		return false
	}
	for i := range this.UsedAppNonces {
		if !bytes.Equal(this.UsedAppNonces[i], that1.UsedAppNonces[i]) {
			return false
		}
	}
	if this.LastSeen != that1.LastSeen {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceManagerClient is the client API for DeviceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceManagerClient interface {
	GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error)
	SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*types.Empty, error)
	DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*types.Empty, error)
}

type deviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewDeviceManagerClient(cc *grpc.ClientConn) DeviceManagerClient {
	return &deviceManagerClient{cc}
}

func (c *deviceManagerClient) GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/lorawan.DeviceManager/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/lorawan.DeviceManager/SetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/lorawan.DeviceManager/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagerServer is the server API for DeviceManager service.
type DeviceManagerServer interface {
	GetDevice(context.Context, *DeviceIdentifier) (*Device, error)
	SetDevice(context.Context, *Device) (*types.Empty, error)
	DeleteDevice(context.Context, *DeviceIdentifier) (*types.Empty, error)
}

// UnimplementedDeviceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceManagerServer struct {
}

func (*UnimplementedDeviceManagerServer) GetDevice(ctx context.Context, req *DeviceIdentifier) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedDeviceManagerServer) SetDevice(ctx context.Context, req *Device) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDevice not implemented")
}
func (*UnimplementedDeviceManagerServer) DeleteDevice(ctx context.Context, req *DeviceIdentifier) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}

func RegisterDeviceManagerServer(s *grpc.Server, srv DeviceManagerServer) {
	s.RegisterService(&_DeviceManager_serviceDesc, srv)
}

func _DeviceManager_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DeviceManager/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).GetDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DeviceManager/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).SetDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lorawan.DeviceManager/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).DeleteDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lorawan.DeviceManager",
	HandlerType: (*DeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _DeviceManager_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _DeviceManager_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceManager_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/protocol/lorawan/device.proto",
}

func (m *DeviceIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DevEui) > 0 {
		i -= len(m.DevEui)
		copy(dAtA[i:], m.DevEui)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DevEui)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppEui) > 0 {
		i -= len(m.AppEui)
		copy(dAtA[i:], m.AppEui)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AppEui)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSeen != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.LastSeen))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.UsedAppNonces) > 0 {
		for iNdEx := len(m.UsedAppNonces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UsedAppNonces[iNdEx])
			copy(dAtA[i:], m.UsedAppNonces[iNdEx])
			i = encodeVarintDevice(dAtA, i, uint64(len(m.UsedAppNonces[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.UsedDevNonces) > 0 {
		for iNdEx := len(m.UsedDevNonces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UsedDevNonces[iNdEx])
			copy(dAtA[i:], m.UsedDevNonces[iNdEx])
			i = encodeVarintDevice(dAtA, i, uint64(len(m.UsedDevNonces[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ActivationConstraints) > 0 {
		i -= len(m.ActivationConstraints)
		copy(dAtA[i:], m.ActivationConstraints)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ActivationConstraints)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Uses32BitFCnt {
		i--
		if m.Uses32BitFCnt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.DisableFCntCheck {
		i--
		if m.DisableFCntCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.FCntDown != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.FCntDown))
		i--
		dAtA[i] = 0x50
	}
	if m.FCntUp != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.FCntUp))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AppSKey) > 0 {
		i -= len(m.AppSKey)
		copy(dAtA[i:], m.AppSKey)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AppSKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NwkSKey) > 0 {
		i -= len(m.NwkSKey)
		copy(dAtA[i:], m.NwkSKey)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.NwkSKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DevAddr) > 0 {
		i -= len(m.DevAddr)
		copy(dAtA[i:], m.DevAddr)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DevAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DevId) > 0 {
		i -= len(m.DevId)
		copy(dAtA[i:], m.DevId)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DevId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevEui) > 0 {
		i -= len(m.DevEui)
		copy(dAtA[i:], m.DevEui)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DevEui)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppEui) > 0 {
		i -= len(m.AppEui)
		copy(dAtA[i:], m.AppEui)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.AppEui)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDeviceIdentifier(r randyDevice, easy bool) *DeviceIdentifier {
	this := &DeviceIdentifier{}
	v1 := r.Intn(100)
	this.AppEui = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.AppEui[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.DevEui = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.DevEui[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDevice(r randyDevice, easy bool) *Device {
	this := &Device{}
	v3 := r.Intn(100)
	this.AppEui = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.AppEui[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.DevEui = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.DevEui[i] = byte(r.Intn(256))
	}
	this.AppId = string(randStringDevice(r))
	this.DevId = string(randStringDevice(r))
	v5 := r.Intn(100)
	this.DevAddr = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.DevAddr[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.NwkSKey = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.NwkSKey[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.AppSKey = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.AppSKey[i] = byte(r.Intn(256))
	}
	v8 := r.Intn(100)
	this.AppKey = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.AppKey[i] = byte(r.Intn(256))
	}
	this.FCntUp = uint32(r.Uint32())
	this.FCntDown = uint32(r.Uint32())
	this.DisableFCntCheck = bool(bool(r.Intn(2) == 0))
	this.Uses32BitFCnt = bool(bool(r.Intn(2) == 0))
	this.ActivationConstraints = string(randStringDevice(r))
	v9 := r.Intn(10)
	this.UsedDevNonces = make([][]byte, v9)
	for i := 0; i < v9; i++ {
		v10 := r.Intn(100)
		this.UsedDevNonces[i] = make([]byte, v10)
		for j := 0; j < v10; j++ {
			this.UsedDevNonces[i][j] = byte(r.Intn(256))
		}
	}
	v11 := r.Intn(10)
	this.UsedAppNonces = make([][]byte, v11)
	for i := 0; i < v11; i++ {
		v12 := r.Intn(100)
		this.UsedAppNonces[i] = make([]byte, v12)
		for j := 0; j < v12; j++ {
			this.UsedAppNonces[i][j] = byte(r.Intn(256))
		}
	}
	this.LastSeen = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastSeen *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDevice interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDevice(r randyDevice) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDevice(r randyDevice) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneDevice(r)
	}
	return string(tmps)
}
func randUnrecognizedDevice(r randyDevice, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDevice(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDevice(dAtA []byte, r randyDevice, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDevice(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateDevice(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDevice(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDevice(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDevice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDevice(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DeviceIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.DevEui)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.DevEui)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.DevId)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.AppSKey)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.FCntUp != 0 {
		n += 1 + sovDevice(uint64(m.FCntUp))
	}
	if m.FCntDown != 0 {
		n += 1 + sovDevice(uint64(m.FCntDown))
	}
	if m.DisableFCntCheck {
		n += 2
	}
	if m.Uses32BitFCnt {
		n += 2
	}
	l = len(m.ActivationConstraints)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if len(m.UsedDevNonces) > 0 {
		for _, b := range m.UsedDevNonces {
			l = len(b)
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	if len(m.UsedAppNonces) > 0 {
		for _, b := range m.UsedAppNonces {
			l = len(b)
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	if m.LastSeen != 0 {
		n += 2 + sovDevice(uint64(m.LastSeen))
	}
	return n
}

func sovDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceIdentifier{`,
		`AppEui:` + fmt.Sprintf("%v", this.AppEui) + `,`,
		`DevEui:` + fmt.Sprintf("%v", this.DevEui) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Device) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Device{`,
		`AppEui:` + fmt.Sprintf("%v", this.AppEui) + `,`,
		`DevEui:` + fmt.Sprintf("%v", this.DevEui) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`DevId:` + fmt.Sprintf("%v", this.DevId) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`NwkSKey:` + fmt.Sprintf("%v", this.NwkSKey) + `,`,
		`AppSKey:` + fmt.Sprintf("%v", this.AppSKey) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`FCntUp:` + fmt.Sprintf("%v", this.FCntUp) + `,`,
		`FCntDown:` + fmt.Sprintf("%v", this.FCntDown) + `,`,
		`DisableFCntCheck:` + fmt.Sprintf("%v", this.DisableFCntCheck) + `,`,
		`Uses32BitFCnt:` + fmt.Sprintf("%v", this.Uses32BitFCnt) + `,`,
		`ActivationConstraints:` + fmt.Sprintf("%v", this.ActivationConstraints) + `,`,
		`UsedDevNonces:` + fmt.Sprintf("%v", this.UsedDevNonces) + `,`,
		`UsedAppNonces:` + fmt.Sprintf("%v", this.UsedAppNonces) + `,`,
		`LastSeen:` + fmt.Sprintf("%v", this.LastSeen) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = append(m.AppEui[:0], dAtA[iNdEx:postIndex]...)
			if m.AppEui == nil {
				m.AppEui = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = append(m.DevEui[:0], dAtA[iNdEx:postIndex]...)
			if m.DevEui == nil {
				m.DevEui = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = append(m.AppEui[:0], dAtA[iNdEx:postIndex]...)
			if m.AppEui == nil {
				m.AppEui = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = append(m.DevEui[:0], dAtA[iNdEx:postIndex]...)
			if m.DevEui == nil {
				m.DevEui = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppSKey = append(m.AppSKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AppSKey == nil {
				m.AppSKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = append(m.AppKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AppKey == nil {
				m.AppKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntUp", wireType)
			}
			m.FCntUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCntUp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCntDown", wireType)
			}
			m.FCntDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCntDown |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableFCntCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableFCntCheck = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uses32BitFCnt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uses32BitFCnt = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationConstraints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationConstraints = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDevNonces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedDevNonces = append(m.UsedDevNonces, make([]byte, postIndex-iNdEx))
			copy(m.UsedDevNonces[len(m.UsedDevNonces)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedAppNonces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedAppNonces = append(m.UsedAppNonces, make([]byte, postIndex-iNdEx))
			copy(m.UsedAppNonces[len(m.UsedAppNonces)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevice = fmt.Errorf("proto: unexpected end of group")
)
