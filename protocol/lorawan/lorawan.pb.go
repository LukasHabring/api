// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto

package lorawan

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}

var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (Modulation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{0}
}

type FrequencyPlan int32

const (
	FrequencyPlan_EU_863_870 FrequencyPlan = 0
	FrequencyPlan_US_902_928 FrequencyPlan = 1
	FrequencyPlan_CN_779_787 FrequencyPlan = 2
	FrequencyPlan_EU_433     FrequencyPlan = 3
	FrequencyPlan_AU_915_928 FrequencyPlan = 4
	FrequencyPlan_CN_470_510 FrequencyPlan = 5
	FrequencyPlan_AS_923     FrequencyPlan = 6
	FrequencyPlan_AS_920_923 FrequencyPlan = 61
	FrequencyPlan_AS_923_925 FrequencyPlan = 62
	FrequencyPlan_KR_920_923 FrequencyPlan = 7
	FrequencyPlan_IN_865_867 FrequencyPlan = 8
	FrequencyPlan_RU_864_870 FrequencyPlan = 9
)

var FrequencyPlan_name = map[int32]string{
	0:  "EU_863_870",
	1:  "US_902_928",
	2:  "CN_779_787",
	3:  "EU_433",
	4:  "AU_915_928",
	5:  "CN_470_510",
	6:  "AS_923",
	61: "AS_920_923",
	62: "AS_923_925",
	7:  "KR_920_923",
	8:  "IN_865_867",
	9:  "RU_864_870",
}

var FrequencyPlan_value = map[string]int32{
	"EU_863_870": 0,
	"US_902_928": 1,
	"CN_779_787": 2,
	"EU_433":     3,
	"AU_915_928": 4,
	"CN_470_510": 5,
	"AS_923":     6,
	"AS_920_923": 61,
	"AS_923_925": 62,
	"KR_920_923": 7,
	"IN_865_867": 8,
	"RU_864_870": 9,
}

func (FrequencyPlan) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{1}
}

type Major int32

const (
	Major_LORAWAN_R1 Major = 0
)

var Major_name = map[int32]string{
	0: "LORAWAN_R1",
}

var Major_value = map[string]int32{
	"LORAWAN_R1": 0,
}

func (Major) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{2}
}

type MType int32

const (
	MType_JOIN_REQUEST     MType = 0
	MType_JOIN_ACCEPT      MType = 1
	MType_UNCONFIRMED_UP   MType = 2
	MType_UNCONFIRMED_DOWN MType = 3
	MType_CONFIRMED_UP     MType = 4
	MType_CONFIRMED_DOWN   MType = 5
)

var MType_name = map[int32]string{
	0: "JOIN_REQUEST",
	1: "JOIN_ACCEPT",
	2: "UNCONFIRMED_UP",
	3: "UNCONFIRMED_DOWN",
	4: "CONFIRMED_UP",
	5: "CONFIRMED_DOWN",
}

var MType_value = map[string]int32{
	"JOIN_REQUEST":     0,
	"JOIN_ACCEPT":      1,
	"UNCONFIRMED_UP":   2,
	"UNCONFIRMED_DOWN": 3,
	"CONFIRMED_UP":     4,
	"CONFIRMED_DOWN":   5,
}

func (MType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{3}
}

type Metadata struct {
	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Modulation" json:"modulation,omitempty"`
	// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
	DataRate string `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// FSK bit rate in bit/s
	BitRate uint32 `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Store the full 32 bit FCnt (deprecated; do not use)
	FCnt                 uint32        `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FrequencyPlan        FrequencyPlan `protobuf:"varint,16,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=lorawan.FrequencyPlan" json:"frequency_plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *Metadata) GetDataRate() string {
	if m != nil {
		return m.DataRate
	}
	return ""
}

func (m *Metadata) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *Metadata) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *Metadata) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *Metadata) GetFrequencyPlan() FrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type TxConfiguration struct {
	Modulation Modulation `protobuf:"varint,11,opt,name=modulation,proto3,enum=lorawan.Modulation" json:"modulation,omitempty"`
	// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
	DataRate string `protobuf:"bytes,12,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// FSK bit rate in bit/s
	BitRate uint32 `protobuf:"varint,13,opt,name=bit_rate,json=bitRate,proto3" json:"bit_rate,omitempty"`
	// LoRa coding rate
	CodingRate string `protobuf:"bytes,14,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Store the full 32 bit FCnt (deprecated; do not use)
	FCnt                 uint32   `protobuf:"varint,15,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxConfiguration) Reset()      { *m = TxConfiguration{} }
func (*TxConfiguration) ProtoMessage() {}
func (*TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{1}
}
func (m *TxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxConfiguration.Merge(m, src)
}
func (m *TxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TxConfiguration proto.InternalMessageInfo

func (m *TxConfiguration) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *TxConfiguration) GetDataRate() string {
	if m != nil {
		return m.DataRate
	}
	return ""
}

func (m *TxConfiguration) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TxConfiguration) GetCodingRate() string {
	if m != nil {
		return m.CodingRate
	}
	return ""
}

func (m *TxConfiguration) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type ActivationMetadata struct {
	AppEui               []byte        `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	DevEui               []byte        `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	DevAddr              []byte        `protobuf:"bytes,3,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	NwkSKey              []byte        `protobuf:"bytes,4,opt,name=nwk_s_key,json=nwkSKey,proto3" json:"nwk_s_key,omitempty"`
	Rx1DrOffset          uint32        `protobuf:"varint,11,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2Dr                uint32        `protobuf:"varint,12,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	RxDelay              uint32        `protobuf:"varint,13,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CfList               *CFList       `protobuf:"bytes,14,opt,name=cf_list,json=cfList,proto3" json:"cf_list,omitempty"`
	FrequencyPlan        FrequencyPlan `protobuf:"varint,15,opt,name=frequency_plan,json=frequencyPlan,proto3,enum=lorawan.FrequencyPlan" json:"frequency_plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ActivationMetadata) Reset()      { *m = ActivationMetadata{} }
func (*ActivationMetadata) ProtoMessage() {}
func (*ActivationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{2}
}
func (m *ActivationMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationMetadata.Merge(m, src)
}
func (m *ActivationMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ActivationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationMetadata proto.InternalMessageInfo

func (m *ActivationMetadata) GetAppEui() []byte {
	if m != nil {
		return m.AppEui
	}
	return nil
}

func (m *ActivationMetadata) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *ActivationMetadata) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *ActivationMetadata) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *ActivationMetadata) GetRx1DrOffset() uint32 {
	if m != nil {
		return m.Rx1DrOffset
	}
	return 0
}

func (m *ActivationMetadata) GetRx2Dr() uint32 {
	if m != nil {
		return m.Rx2Dr
	}
	return 0
}

func (m *ActivationMetadata) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *ActivationMetadata) GetCfList() *CFList {
	if m != nil {
		return m.CfList
	}
	return nil
}

func (m *ActivationMetadata) GetFrequencyPlan() FrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return FrequencyPlan_EU_863_870
}

type Message struct {
	MHdr *MHDR  `protobuf:"bytes,1,opt,name=m_hdr,json=mHdr,proto3" json:"m_hdr,omitempty"`
	Mic  []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Message_MacPayload
	//	*Message_JoinRequestPayload
	//	*Message_JoinAcceptPayload
	Payload              isMessage_Payload `protobuf_oneof:"Payload"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{3}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Payload interface {
	isMessage_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_MacPayload struct {
	MacPayload *MACPayload `protobuf:"bytes,3,opt,name=mac_payload,json=macPayload,proto3,oneof" json:"mac_payload,omitempty"`
}
type Message_JoinRequestPayload struct {
	JoinRequestPayload *JoinRequestPayload `protobuf:"bytes,4,opt,name=join_request_payload,json=joinRequestPayload,proto3,oneof" json:"join_request_payload,omitempty"`
}
type Message_JoinAcceptPayload struct {
	JoinAcceptPayload *JoinAcceptPayload `protobuf:"bytes,5,opt,name=join_accept_payload,json=joinAcceptPayload,proto3,oneof" json:"join_accept_payload,omitempty"`
}

func (*Message_MacPayload) isMessage_Payload()         {}
func (*Message_JoinRequestPayload) isMessage_Payload() {}
func (*Message_JoinAcceptPayload) isMessage_Payload()  {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetMHdr() *MHDR {
	if m != nil {
		return m.MHdr
	}
	return nil
}

func (m *Message) GetMic() []byte {
	if m != nil {
		return m.Mic
	}
	return nil
}

func (m *Message) GetMacPayload() *MACPayload {
	if x, ok := m.GetPayload().(*Message_MacPayload); ok {
		return x.MacPayload
	}
	return nil
}

func (m *Message) GetJoinRequestPayload() *JoinRequestPayload {
	if x, ok := m.GetPayload().(*Message_JoinRequestPayload); ok {
		return x.JoinRequestPayload
	}
	return nil
}

func (m *Message) GetJoinAcceptPayload() *JoinAcceptPayload {
	if x, ok := m.GetPayload().(*Message_JoinAcceptPayload); ok {
		return x.JoinAcceptPayload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_MacPayload)(nil),
		(*Message_JoinRequestPayload)(nil),
		(*Message_JoinAcceptPayload)(nil),
	}
}

type MHDR struct {
	MType                MType    `protobuf:"varint,1,opt,name=m_type,json=mType,proto3,enum=lorawan.MType" json:"m_type,omitempty"`
	Major                Major    `protobuf:"varint,2,opt,name=major,proto3,enum=lorawan.Major" json:"major,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MHDR) Reset()      { *m = MHDR{} }
func (*MHDR) ProtoMessage() {}
func (*MHDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{4}
}
func (m *MHDR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHDR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MHDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHDR.Merge(m, src)
}
func (m *MHDR) XXX_Size() int {
	return m.Size()
}
func (m *MHDR) XXX_DiscardUnknown() {
	xxx_messageInfo_MHDR.DiscardUnknown(m)
}

var xxx_messageInfo_MHDR proto.InternalMessageInfo

func (m *MHDR) GetMType() MType {
	if m != nil {
		return m.MType
	}
	return MType_JOIN_REQUEST
}

func (m *MHDR) GetMajor() Major {
	if m != nil {
		return m.Major
	}
	return Major_LORAWAN_R1
}

type MACPayload struct {
	FHdr                 *FHDR    `protobuf:"bytes,1,opt,name=f_hdr,json=fHdr,proto3" json:"f_hdr,omitempty"`
	FPort                int32    `protobuf:"varint,2,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	FrmPayload           []byte   `protobuf:"bytes,3,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACPayload) Reset()      { *m = MACPayload{} }
func (*MACPayload) ProtoMessage() {}
func (*MACPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{5}
}
func (m *MACPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MACPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACPayload.Merge(m, src)
}
func (m *MACPayload) XXX_Size() int {
	return m.Size()
}
func (m *MACPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MACPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MACPayload proto.InternalMessageInfo

func (m *MACPayload) GetFHdr() *FHDR {
	if m != nil {
		return m.FHdr
	}
	return nil
}

func (m *MACPayload) GetFPort() int32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MACPayload) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

type FHDR struct {
	DevAddr              []byte        `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	FCtrl                *FCtrl        `protobuf:"bytes,2,opt,name=f_ctrl,json=fCtrl,proto3" json:"f_ctrl,omitempty"`
	FCnt                 uint32        `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	FOpts                []*MACCommand `protobuf:"bytes,4,rep,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FHDR) Reset()      { *m = FHDR{} }
func (*FHDR) ProtoMessage() {}
func (*FHDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{6}
}
func (m *FHDR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FHDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FHDR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FHDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FHDR.Merge(m, src)
}
func (m *FHDR) XXX_Size() int {
	return m.Size()
}
func (m *FHDR) XXX_DiscardUnknown() {
	xxx_messageInfo_FHDR.DiscardUnknown(m)
}

var xxx_messageInfo_FHDR proto.InternalMessageInfo

func (m *FHDR) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *FHDR) GetFCtrl() *FCtrl {
	if m != nil {
		return m.FCtrl
	}
	return nil
}

func (m *FHDR) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *FHDR) GetFOpts() []*MACCommand {
	if m != nil {
		return m.FOpts
	}
	return nil
}

type FCtrl struct {
	Adr                  bool     `protobuf:"varint,1,opt,name=adr,proto3" json:"adr,omitempty"`
	AdrAckReq            bool     `protobuf:"varint,2,opt,name=adr_ack_req,json=adrAckReq,proto3" json:"adr_ack_req,omitempty"`
	Ack                  bool     `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	FPending             bool     `protobuf:"varint,4,opt,name=f_pending,json=fPending,proto3" json:"f_pending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FCtrl) Reset()      { *m = FCtrl{} }
func (*FCtrl) ProtoMessage() {}
func (*FCtrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{7}
}
func (m *FCtrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FCtrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FCtrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FCtrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FCtrl.Merge(m, src)
}
func (m *FCtrl) XXX_Size() int {
	return m.Size()
}
func (m *FCtrl) XXX_DiscardUnknown() {
	xxx_messageInfo_FCtrl.DiscardUnknown(m)
}

var xxx_messageInfo_FCtrl proto.InternalMessageInfo

func (m *FCtrl) GetAdr() bool {
	if m != nil {
		return m.Adr
	}
	return false
}

func (m *FCtrl) GetAdrAckReq() bool {
	if m != nil {
		return m.AdrAckReq
	}
	return false
}

func (m *FCtrl) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func (m *FCtrl) GetFPending() bool {
	if m != nil {
		return m.FPending
	}
	return false
}

type MACCommand struct {
	Cid                  uint32   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACCommand) Reset()      { *m = MACCommand{} }
func (*MACCommand) ProtoMessage() {}
func (*MACCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{8}
}
func (m *MACCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MACCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MACCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MACCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACCommand.Merge(m, src)
}
func (m *MACCommand) XXX_Size() int {
	return m.Size()
}
func (m *MACCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_MACCommand.DiscardUnknown(m)
}

var xxx_messageInfo_MACCommand proto.InternalMessageInfo

func (m *MACCommand) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *MACCommand) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type JoinRequestPayload struct {
	AppEui               []byte   `protobuf:"bytes,1,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	DevEui               []byte   `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	DevNonce             []byte   `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3" json:"dev_nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequestPayload) Reset()      { *m = JoinRequestPayload{} }
func (*JoinRequestPayload) ProtoMessage() {}
func (*JoinRequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{9}
}
func (m *JoinRequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinRequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinRequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinRequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequestPayload.Merge(m, src)
}
func (m *JoinRequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *JoinRequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequestPayload proto.InternalMessageInfo

func (m *JoinRequestPayload) GetAppEui() []byte {
	if m != nil {
		return m.AppEui
	}
	return nil
}

func (m *JoinRequestPayload) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *JoinRequestPayload) GetDevNonce() []byte {
	if m != nil {
		return m.DevNonce
	}
	return nil
}

type JoinAcceptPayload struct {
	Encrypted            []byte      `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	AppNonce             []byte      `protobuf:"bytes,2,opt,name=app_nonce,json=appNonce,proto3" json:"app_nonce,omitempty"`
	NetId                []byte      `protobuf:"bytes,3,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	DevAddr              []byte      `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	DlSettings           *DLSettings `protobuf:"bytes,5,opt,name=dl_settings,json=dlSettings,proto3" json:"dl_settings,omitempty"`
	RxDelay              uint32      `protobuf:"varint,6,opt,name=rx_delay,json=rxDelay,proto3" json:"rx_delay,omitempty"`
	CfList               *CFList     `protobuf:"bytes,7,opt,name=cf_list,json=cfList,proto3" json:"cf_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JoinAcceptPayload) Reset()      { *m = JoinAcceptPayload{} }
func (*JoinAcceptPayload) ProtoMessage() {}
func (*JoinAcceptPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{10}
}
func (m *JoinAcceptPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinAcceptPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinAcceptPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinAcceptPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinAcceptPayload.Merge(m, src)
}
func (m *JoinAcceptPayload) XXX_Size() int {
	return m.Size()
}
func (m *JoinAcceptPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinAcceptPayload.DiscardUnknown(m)
}

var xxx_messageInfo_JoinAcceptPayload proto.InternalMessageInfo

func (m *JoinAcceptPayload) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *JoinAcceptPayload) GetAppNonce() []byte {
	if m != nil {
		return m.AppNonce
	}
	return nil
}

func (m *JoinAcceptPayload) GetNetId() []byte {
	if m != nil {
		return m.NetId
	}
	return nil
}

func (m *JoinAcceptPayload) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *JoinAcceptPayload) GetDlSettings() *DLSettings {
	if m != nil {
		return m.DlSettings
	}
	return nil
}

func (m *JoinAcceptPayload) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *JoinAcceptPayload) GetCfList() *CFList {
	if m != nil {
		return m.CfList
	}
	return nil
}

type DLSettings struct {
	Rx1DrOffset          uint32   `protobuf:"varint,1,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	Rx2Dr                uint32   `protobuf:"varint,2,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DLSettings) Reset()      { *m = DLSettings{} }
func (*DLSettings) ProtoMessage() {}
func (*DLSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{11}
}
func (m *DLSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DLSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DLSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DLSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DLSettings.Merge(m, src)
}
func (m *DLSettings) XXX_Size() int {
	return m.Size()
}
func (m *DLSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DLSettings.DiscardUnknown(m)
}

var xxx_messageInfo_DLSettings proto.InternalMessageInfo

func (m *DLSettings) GetRx1DrOffset() uint32 {
	if m != nil {
		return m.Rx1DrOffset
	}
	return 0
}

func (m *DLSettings) GetRx2Dr() uint32 {
	if m != nil {
		return m.Rx2Dr
	}
	return 0
}

type CFList struct {
	Freq                 []uint32 `protobuf:"varint,1,rep,packed,name=freq,proto3" json:"freq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFList) Reset()      { *m = CFList{} }
func (*CFList) ProtoMessage() {}
func (*CFList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b45ac62fea3ace83, []int{12}
}
func (m *CFList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CFList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CFList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CFList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFList.Merge(m, src)
}
func (m *CFList) XXX_Size() int {
	return m.Size()
}
func (m *CFList) XXX_DiscardUnknown() {
	xxx_messageInfo_CFList.DiscardUnknown(m)
}

var xxx_messageInfo_CFList proto.InternalMessageInfo

func (m *CFList) GetFreq() []uint32 {
	if m != nil {
		return m.Freq
	}
	return nil
}

func init() {
	proto.RegisterEnum("lorawan.Modulation", Modulation_name, Modulation_value)
	golang_proto.RegisterEnum("lorawan.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("lorawan.FrequencyPlan", FrequencyPlan_name, FrequencyPlan_value)
	golang_proto.RegisterEnum("lorawan.FrequencyPlan", FrequencyPlan_name, FrequencyPlan_value)
	proto.RegisterEnum("lorawan.Major", Major_name, Major_value)
	golang_proto.RegisterEnum("lorawan.Major", Major_name, Major_value)
	proto.RegisterEnum("lorawan.MType", MType_name, MType_value)
	golang_proto.RegisterEnum("lorawan.MType", MType_name, MType_value)
	proto.RegisterType((*Metadata)(nil), "lorawan.Metadata")
	golang_proto.RegisterType((*Metadata)(nil), "lorawan.Metadata")
	proto.RegisterType((*TxConfiguration)(nil), "lorawan.TxConfiguration")
	golang_proto.RegisterType((*TxConfiguration)(nil), "lorawan.TxConfiguration")
	proto.RegisterType((*ActivationMetadata)(nil), "lorawan.ActivationMetadata")
	golang_proto.RegisterType((*ActivationMetadata)(nil), "lorawan.ActivationMetadata")
	proto.RegisterType((*Message)(nil), "lorawan.Message")
	golang_proto.RegisterType((*Message)(nil), "lorawan.Message")
	proto.RegisterType((*MHDR)(nil), "lorawan.MHDR")
	golang_proto.RegisterType((*MHDR)(nil), "lorawan.MHDR")
	proto.RegisterType((*MACPayload)(nil), "lorawan.MACPayload")
	golang_proto.RegisterType((*MACPayload)(nil), "lorawan.MACPayload")
	proto.RegisterType((*FHDR)(nil), "lorawan.FHDR")
	golang_proto.RegisterType((*FHDR)(nil), "lorawan.FHDR")
	proto.RegisterType((*FCtrl)(nil), "lorawan.FCtrl")
	golang_proto.RegisterType((*FCtrl)(nil), "lorawan.FCtrl")
	proto.RegisterType((*MACCommand)(nil), "lorawan.MACCommand")
	golang_proto.RegisterType((*MACCommand)(nil), "lorawan.MACCommand")
	proto.RegisterType((*JoinRequestPayload)(nil), "lorawan.JoinRequestPayload")
	golang_proto.RegisterType((*JoinRequestPayload)(nil), "lorawan.JoinRequestPayload")
	proto.RegisterType((*JoinAcceptPayload)(nil), "lorawan.JoinAcceptPayload")
	golang_proto.RegisterType((*JoinAcceptPayload)(nil), "lorawan.JoinAcceptPayload")
	proto.RegisterType((*DLSettings)(nil), "lorawan.DLSettings")
	golang_proto.RegisterType((*DLSettings)(nil), "lorawan.DLSettings")
	proto.RegisterType((*CFList)(nil), "lorawan.CFList")
	golang_proto.RegisterType((*CFList)(nil), "lorawan.CFList")
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto", fileDescriptor_b45ac62fea3ace83)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto", fileDescriptor_b45ac62fea3ace83)
}

var fileDescriptor_b45ac62fea3ace83 = []byte{
	// 1368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x3d, 0x70, 0x13, 0x49,
	0x16, 0x9e, 0x96, 0x34, 0x92, 0xfc, 0x64, 0xd9, 0x43, 0x03, 0x87, 0xf8, 0xa9, 0xc1, 0xa5, 0x82,
	0x2a, 0x9f, 0x03, 0xd9, 0x96, 0xff, 0x03, 0xa8, 0x12, 0xb2, 0x7d, 0x18, 0x6c, 0x59, 0xd7, 0xb6,
	0x8b, 0xaa, 0x4b, 0xba, 0xc6, 0x33, 0x3d, 0xf6, 0x58, 0xd2, 0xcc, 0xd0, 0x6a, 0xff, 0xe8, 0x22,
	0x42, 0x2e, 0xbb, 0xf0, 0xc2, 0xdb, 0x8c, 0xda, 0x88, 0x60, 0x03, 0x82, 0x0d, 0xc8, 0x96, 0x90,
	0x90, 0x10, 0x4b, 0x09, 0xc1, 0x06, 0x84, 0x54, 0x6d, 0xb2, 0xd5, 0xad, 0x7f, 0x9b, 0xa5, 0x8a,
	0x8d, 0x36, 0x9a, 0x7e, 0xef, 0x7b, 0xef, 0xeb, 0x37, 0xdf, 0x7b, 0x7a, 0x1a, 0x78, 0x78, 0xe0,
	0x89, 0xc3, 0xe3, 0xfd, 0x9c, 0x1d, 0xd4, 0xa6, 0x77, 0x0f, 0xd9, 0xee, 0xa1, 0xe7, 0x1f, 0xd4,
	0x4b, 0x4c, 0x9c, 0x06, 0xbc, 0x32, 0x6d, 0x85, 0xde, 0x74, 0xc8, 0x03, 0x11, 0xd8, 0x41, 0x75,
	0xba, 0x1a, 0x70, 0xeb, 0xd4, 0xf2, 0xbb, 0xcf, 0x9c, 0x02, 0x70, 0xa2, 0x63, 0x66, 0x7f, 0x45,
	0x90, 0xdc, 0x62, 0xc2, 0x72, 0x2c, 0x61, 0xe1, 0x39, 0x80, 0x5a, 0xe0, 0x1c, 0x57, 0x2d, 0xe1,
	0x05, 0x7e, 0x26, 0x35, 0x81, 0x26, 0xc7, 0xf2, 0x57, 0x73, 0xdd, 0xcc, 0xad, 0x1e, 0x44, 0x06,
	0xc2, 0xf0, 0x6d, 0x18, 0x91, 0xc9, 0x94, 0x5b, 0x82, 0x65, 0x46, 0x27, 0xd0, 0xe4, 0x08, 0x49,
	0x4a, 0x07, 0xb1, 0x04, 0xc3, 0x37, 0x21, 0xb9, 0xef, 0x89, 0x36, 0x96, 0x9e, 0x40, 0x93, 0x69,
	0x92, 0xd8, 0xf7, 0x84, 0x82, 0xee, 0x42, 0xca, 0x0e, 0x1c, 0xcf, 0x3f, 0x68, 0xa3, 0x63, 0x2a,
	0x13, 0xda, 0x2e, 0x15, 0x70, 0x15, 0x74, 0x97, 0xda, 0xbe, 0xc8, 0x8c, 0xab, 0xc4, 0x98, 0x5b,
	0xf4, 0x05, 0x7e, 0x00, 0x63, 0x2e, 0x67, 0xcf, 0x8f, 0x99, 0x6f, 0x37, 0x68, 0x58, 0xb5, 0xfc,
	0x8c, 0xa1, 0xca, 0xfc, 0x5b, 0xaf, 0xcc, 0xf5, 0x2e, 0x5c, 0xae, 0x5a, 0x3e, 0x49, 0xbb, 0x83,
	0x66, 0xf6, 0x27, 0x04, 0xe3, 0xbb, 0x67, 0xc5, 0xc0, 0x77, 0xbd, 0x83, 0x63, 0xde, 0x7e, 0x81,
	0xbf, 0xfe, 0x5b, 0x67, 0x7f, 0x8e, 0x00, 0x2e, 0xd8, 0xc2, 0x3b, 0x51, 0x97, 0xf7, 0xfa, 0x75,
	0x03, 0x12, 0x56, 0x18, 0x52, 0x76, 0xec, 0x65, 0xd0, 0x04, 0x9a, 0x1c, 0x25, 0x71, 0x2b, 0x0c,
	0xd7, 0x8e, 0x3d, 0x09, 0x38, 0xec, 0x44, 0x01, 0x91, 0x36, 0xe0, 0xb0, 0x13, 0x09, 0xdc, 0x84,
	0xa4, 0x04, 0x2c, 0xc7, 0xe1, 0x99, 0xa8, 0x42, 0x64, 0x60, 0xc1, 0x71, 0x38, 0xbe, 0x05, 0x23,
	0xfe, 0x69, 0x85, 0xd6, 0x69, 0x85, 0x35, 0x32, 0xb1, 0x36, 0xe6, 0x9f, 0x56, 0x76, 0x9e, 0xb2,
	0x06, 0xce, 0x42, 0x9a, 0x9f, 0xcd, 0x52, 0x87, 0xd3, 0xc0, 0x75, 0xeb, 0x4c, 0x28, 0x95, 0xd2,
	0x24, 0xc5, 0xcf, 0x66, 0x57, 0xf9, 0xb6, 0x72, 0xe1, 0xeb, 0x10, 0xe7, 0x67, 0x79, 0xea, 0x70,
	0x25, 0x47, 0x9a, 0xe8, 0xfc, 0x2c, 0xbf, 0xca, 0xe5, 0x8d, 0xfc, 0x8c, 0x3a, 0xac, 0x6a, 0x35,
	0xba, 0x5a, 0xf0, 0xb3, 0x55, 0x69, 0xe2, 0x49, 0x48, 0xd8, 0x2e, 0xad, 0x7a, 0x75, 0xa1, 0x74,
	0x48, 0xe5, 0xc7, 0x7b, 0xaa, 0x17, 0xd7, 0x37, 0xbd, 0xba, 0x20, 0x71, 0xdb, 0x95, 0xcf, 0xaf,
	0x74, 0x7d, 0xfc, 0x7b, 0xba, 0xfe, 0x43, 0x04, 0x12, 0x5b, 0xac, 0x5e, 0xb7, 0x0e, 0x18, 0xce,
	0x82, 0x5e, 0xa3, 0x87, 0x0e, 0x57, 0x8a, 0xa5, 0xf2, 0xe9, 0x7e, 0xa3, 0x1f, 0xaf, 0x12, 0x12,
	0xab, 0x3d, 0x76, 0x38, 0x36, 0x20, 0x5a, 0xf3, 0xec, 0x8e, 0x74, 0xf2, 0x88, 0x17, 0x21, 0x55,
	0xb3, 0x6c, 0x1a, 0x5a, 0x8d, 0x6a, 0x60, 0x39, 0x4a, 0xba, 0xd4, 0xe0, 0x90, 0x14, 0x8a, 0xe5,
	0x36, 0xf4, 0x58, 0x23, 0x50, 0xb3, 0xec, 0x8e, 0x85, 0xb7, 0xe1, 0xda, 0x51, 0xe0, 0xf9, 0x54,
	0x95, 0x53, 0x17, 0x3d, 0x82, 0x98, 0x22, 0xb8, 0xdd, 0x23, 0x78, 0x12, 0x78, 0x3e, 0x69, 0xc7,
	0xf4, 0x89, 0xf0, 0xd1, 0x25, 0x2f, 0xde, 0x84, 0xab, 0x8a, 0xd0, 0xb2, 0x6d, 0x16, 0xf6, 0xf9,
	0x74, 0xc5, 0x77, 0x6b, 0x88, 0xaf, 0xa0, 0x42, 0xfa, 0x74, 0x57, 0x8e, 0x2e, 0x3a, 0x1f, 0x8d,
	0x40, 0xa2, 0x73, 0xcc, 0xee, 0x40, 0x4c, 0x2a, 0x80, 0xef, 0x43, 0xbc, 0x46, 0x45, 0x23, 0x64,
	0x4a, 0xa0, 0xb1, 0xfc, 0x58, 0xff, 0x25, 0x77, 0x1b, 0x21, 0x23, 0x7a, 0x4d, 0x3e, 0xf0, 0x3d,
	0xd0, 0x6b, 0xd6, 0x51, 0xc0, 0x95, 0x48, 0x43, 0x51, 0xd2, 0x4b, 0xda, 0x60, 0xf6, 0x10, 0xa0,
	0x2f, 0x8d, 0x94, 0xde, 0xfd, 0xaa, 0xf4, 0xeb, 0x4a, 0x7a, 0x57, 0x4a, 0x7f, 0x1d, 0xe2, 0x2e,
	0x0d, 0x03, 0x2e, 0x14, 0xb1, 0x4e, 0x74, 0xb7, 0x1c, 0x70, 0x21, 0x7f, 0x36, 0x2e, 0xaf, 0x0d,
	0xe9, 0x3f, 0x4a, 0xc0, 0xe5, 0xb5, 0x6e, 0xf9, 0xff, 0x41, 0x10, 0x93, 0x34, 0x43, 0x13, 0x8e,
	0x86, 0x27, 0xfc, 0xbe, 0xe4, 0xb6, 0x05, 0xaf, 0x2a, 0xee, 0xd4, 0x40, 0xd1, 0xeb, 0x45, 0xc1,
	0xab, 0x44, 0x77, 0xe5, 0xa3, 0xff, 0x0b, 0x8c, 0x0e, 0xec, 0x9d, 0x29, 0x99, 0x1b, 0x84, 0xa2,
	0x9e, 0x89, 0x4d, 0x44, 0x2f, 0xf6, 0xbe, 0x18, 0xd4, 0x6a, 0x96, 0xef, 0x10, 0xdd, 0xdd, 0x0e,
	0x45, 0x3d, 0x7b, 0x08, 0xba, 0x22, 0x94, 0x73, 0x64, 0x75, 0xca, 0x48, 0x12, 0x79, 0xc4, 0x26,
	0xa4, 0x2c, 0x87, 0x53, 0xcb, 0xae, 0xc8, 0x91, 0x50, 0x75, 0x24, 0xc9, 0x88, 0xe5, 0xf0, 0x82,
	0x5d, 0x21, 0xec, 0xb9, 0xca, 0xb0, 0x2b, 0xea, 0x66, 0x99, 0x61, 0x57, 0xe4, 0xa2, 0x71, 0x69,
	0xc8, 0x7c, 0xb9, 0x20, 0xd4, 0xd8, 0x24, 0x49, 0xd2, 0x2d, 0xb7, 0xed, 0xec, 0xb2, 0xd2, 0xb7,
	0x73, 0xbd, 0x4c, 0xb6, 0x3d, 0x47, 0x5d, 0x97, 0x26, 0xf2, 0x88, 0x33, 0x90, 0xe8, 0x4a, 0xd6,
	0x1e, 0xe6, 0xae, 0x99, 0xb5, 0x01, 0x5f, 0x9e, 0xb9, 0x3f, 0xb1, 0x50, 0xe4, 0x1e, 0x64, 0x27,
	0xd4, 0x0f, 0x7c, 0x9b, 0x75, 0xda, 0x22, 0xf5, 0x2f, 0x49, 0x3b, 0xfb, 0x1b, 0x82, 0x2b, 0x97,
	0x26, 0x11, 0xdf, 0x81, 0x11, 0xe6, 0xdb, 0xbc, 0x11, 0x0a, 0xe6, 0x74, 0xae, 0xe9, 0x3b, 0x24,
	0xa1, 0x2c, 0xa1, 0x4d, 0xd8, 0xbe, 0x2b, 0x69, 0x85, 0xa1, 0x22, 0x94, 0xd3, 0xe1, 0x33, 0x41,
	0xbd, 0xee, 0x04, 0xe8, 0x3e, 0x13, 0x1b, 0xce, 0x50, 0xcf, 0x63, 0xc3, 0x3d, 0x9f, 0x87, 0x94,
	0x53, 0xa5, 0x75, 0x26, 0x84, 0xfc, 0x87, 0xec, 0xfc, 0x4e, 0xfa, 0xcd, 0x5b, 0xdd, 0xdc, 0xe9,
	0x40, 0x04, 0x9c, 0x6a, 0xf7, 0x3c, 0xb4, 0xb4, 0xe2, 0x7f, 0xb8, 0xb4, 0x12, 0xdf, 0x5c, 0x5a,
	0xd9, 0x7f, 0x00, 0xf4, 0xe9, 0x2f, 0xaf, 0x50, 0xf4, 0xad, 0x15, 0x1a, 0x19, 0x58, 0xa1, 0xd9,
	0x3b, 0x10, 0x6f, 0x53, 0x63, 0x0c, 0x31, 0xb9, 0xd9, 0x32, 0x68, 0x22, 0xaa, 0x26, 0x93, 0xb3,
	0xe7, 0x53, 0x77, 0x01, 0xfa, 0xff, 0x51, 0x38, 0x09, 0xb1, 0xcd, 0x6d, 0x52, 0x30, 0x34, 0x9c,
	0x80, 0xe8, 0xfa, 0xce, 0x53, 0x03, 0x4d, 0xfd, 0x82, 0x20, 0x3d, 0xb4, 0x1e, 0xf1, 0x18, 0xc0,
	0xda, 0x1e, 0x5d, 0x5e, 0x9c, 0xa3, 0xcb, 0x4b, 0x33, 0x86, 0x26, 0xed, 0xbd, 0x1d, 0xba, 0x32,
	0x93, 0xa7, 0x2b, 0xf9, 0x65, 0x03, 0x49, 0xbb, 0x58, 0xa2, 0x4b, 0x4b, 0x2b, 0x74, 0x69, 0x79,
	0xc9, 0x88, 0x60, 0x80, 0xf8, 0xda, 0x1e, 0x9d, 0x9f, 0x9b, 0x33, 0xa2, 0x12, 0x2b, 0xec, 0xd1,
	0x95, 0xd9, 0x05, 0x15, 0x1b, 0xeb, 0xc4, 0xce, 0x2f, 0xcd, 0xd0, 0x85, 0xd9, 0x19, 0x43, 0x97,
	0xb1, 0x85, 0x1d, 0xba, 0x92, 0x9f, 0x33, 0xe2, 0x2a, 0x56, 0x9e, 0x67, 0x94, 0xfd, 0xa0, 0x67,
	0xcf, 0xd1, 0x95, 0xfc, 0x82, 0xf1, 0x50, 0xda, 0x4f, 0x49, 0x0f, 0x4f, 0x48, 0x7b, 0xa3, 0x44,
	0x97, 0x17, 0x17, 0xe8, 0xf2, 0xe2, 0x92, 0x91, 0x94, 0x36, 0x91, 0x75, 0xce, 0xab, 0x3a, 0x47,
	0xa6, 0x6e, 0x80, 0xae, 0xd6, 0x8b, 0x04, 0xe4, 0x5b, 0x3e, 0x2b, 0x94, 0x28, 0x99, 0x35, 0xb4,
	0xa9, 0x7f, 0x83, 0xae, 0xb6, 0x13, 0x36, 0x60, 0xf4, 0xc9, 0xf6, 0x46, 0x89, 0x92, 0xb5, 0x7f,
	0xee, 0xad, 0xed, 0xec, 0x1a, 0x1a, 0x1e, 0x87, 0x94, 0xf2, 0x14, 0x8a, 0xc5, 0xb5, 0xf2, 0xae,
	0x81, 0x30, 0x86, 0xb1, 0xbd, 0x52, 0x71, 0xbb, 0xb4, 0xbe, 0x41, 0xb6, 0xd6, 0x56, 0xe9, 0x5e,
	0xd9, 0x88, 0xe0, 0x6b, 0x60, 0x0c, 0xfa, 0x56, 0xb7, 0x9f, 0x95, 0x8c, 0xa8, 0x24, 0x1b, 0x8a,
	0x8b, 0xc9, 0xdc, 0x0b, 0x51, 0xfa, 0xa3, 0x97, 0x91, 0x77, 0xe7, 0x26, 0x7a, 0x7f, 0x6e, 0xa2,
	0x0f, 0xe7, 0xa6, 0xf6, 0xf1, 0xdc, 0xd4, 0x3e, 0x9d, 0x9b, 0xda, 0xe7, 0x73, 0x53, 0xfb, 0x72,
	0x6e, 0xa2, 0x17, 0x4d, 0x13, 0xbd, 0x6c, 0x9a, 0xda, 0xab, 0xa6, 0x89, 0x5e, 0x37, 0x4d, 0xed,
	0x4d, 0xd3, 0xd4, 0xde, 0x36, 0x4d, 0xed, 0x5d, 0xd3, 0x44, 0xef, 0x9b, 0x26, 0xfa, 0xd0, 0x34,
	0xb5, 0x8f, 0x4d, 0x13, 0x7d, 0x6a, 0x9a, 0xda, 0xe7, 0xa6, 0x89, 0xbe, 0x34, 0x4d, 0xed, 0x45,
	0xcb, 0xd4, 0x5e, 0xb6, 0x4c, 0xf4, 0xdf, 0x96, 0xa9, 0xfd, 0xaf, 0x65, 0xa2, 0xff, 0xb7, 0x4c,
	0xed, 0x55, 0xcb, 0xd4, 0x5e, 0xb7, 0x4c, 0xf4, 0xa6, 0x65, 0xa2, 0xb7, 0x2d, 0x13, 0xc1, 0xdf,
	0x03, 0x7e, 0x90, 0x13, 0x87, 0x4c, 0xa8, 0x4f, 0x3f, 0xbf, 0xfd, 0xe9, 0x97, 0xb3, 0x42, 0x2f,
	0xd7, 0xfd, 0xf4, 0xeb, 0xce, 0xe5, 0xa3, 0xd1, 0xcd, 0x80, 0x58, 0xcf, 0x0a, 0xa5, 0xb2, 0x04,
	0xca, 0xe8, 0x5f, 0x33, 0xdf, 0xfb, 0xf1, 0xf8, 0x63, 0xe4, 0xde, 0xc5, 0xb8, 0x5c, 0xa1, 0xbc,
	0x91, 0x1b, 0xe4, 0xb5, 0x83, 0xea, 0x7e, 0x5c, 0x25, 0xce, 0xfd, 0x1e, 0x00, 0x00, 0xff, 0xff,
	0xbc, 0x2a, 0x91, 0x51, 0x9e, 0x0a, 0x00, 0x00,
}

func (x Modulation) String() string {
	s, ok := Modulation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FrequencyPlan) String() string {
	s, ok := FrequencyPlan_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Major) String() string {
	s, ok := Major_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MType) String() string {
	s, ok := MType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Modulation != that1.Modulation {
		return false
	}
	if this.DataRate != that1.DataRate {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return false
	}
	return true
}
func (this *TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxConfiguration)
	if !ok {
		that2, ok := that.(TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Modulation != that1.Modulation {
		return false
	}
	if this.DataRate != that1.DataRate {
		return false
	}
	if this.BitRate != that1.BitRate {
		return false
	}
	if this.CodingRate != that1.CodingRate {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	return true
}
func (this *ActivationMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationMetadata)
	if !ok {
		that2, ok := that.(ActivationMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AppEui, that1.AppEui) {
		return false
	}
	if !bytes.Equal(this.DevEui, that1.DevEui) {
		return false
	}
	if !bytes.Equal(this.DevAddr, that1.DevAddr) {
		return false
	}
	if !bytes.Equal(this.NwkSKey, that1.NwkSKey) {
		return false
	}
	if this.Rx1DrOffset != that1.Rx1DrOffset {
		return false
	}
	if this.Rx2Dr != that1.Rx2Dr {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CfList.Equal(that1.CfList) {
		return false
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MHdr.Equal(that1.MHdr) {
		return false
	}
	if !bytes.Equal(this.Mic, that1.Mic) {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *Message_MacPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_MacPayload)
	if !ok {
		that2, ok := that.(Message_MacPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MacPayload.Equal(that1.MacPayload) {
		return false
	}
	return true
}
func (this *Message_JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_JoinRequestPayload)
	if !ok {
		that2, ok := that.(Message_JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinRequestPayload.Equal(that1.JoinRequestPayload) {
		return false
	}
	return true
}
func (this *Message_JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_JoinAcceptPayload)
	if !ok {
		that2, ok := that.(Message_JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinAcceptPayload.Equal(that1.JoinAcceptPayload) {
		return false
	}
	return true
}
func (this *MHDR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MHDR)
	if !ok {
		that2, ok := that.(MHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MType != that1.MType {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	return true
}
func (this *MACPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACPayload)
	if !ok {
		that2, ok := that.(MACPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FHdr.Equal(that1.FHdr) {
		return false
	}
	if this.FPort != that1.FPort {
		return false
	}
	if !bytes.Equal(this.FrmPayload, that1.FrmPayload) {
		return false
	}
	return true
}
func (this *FHDR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FHDR)
	if !ok {
		that2, ok := that.(FHDR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.DevAddr, that1.DevAddr) {
		return false
	}
	if !this.FCtrl.Equal(that1.FCtrl) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	if len(this.FOpts) != len(that1.FOpts) {
		return false
	}
	for i := range this.FOpts {
		if !this.FOpts[i].Equal(that1.FOpts[i]) {
			return false
		}
	}
	return true
}
func (this *FCtrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FCtrl)
	if !ok {
		that2, ok := that.(FCtrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Adr != that1.Adr {
		return false
	}
	if this.AdrAckReq != that1.AdrAckReq {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	if this.FPending != that1.FPending {
		return false
	}
	return true
}
func (this *MACCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MACCommand)
	if !ok {
		that2, ok := that.(MACCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *JoinRequestPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinRequestPayload)
	if !ok {
		that2, ok := that.(JoinRequestPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AppEui, that1.AppEui) {
		return false
	}
	if !bytes.Equal(this.DevEui, that1.DevEui) {
		return false
	}
	if !bytes.Equal(this.DevNonce, that1.DevNonce) {
		return false
	}
	return true
}
func (this *JoinAcceptPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinAcceptPayload)
	if !ok {
		that2, ok := that.(JoinAcceptPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Encrypted, that1.Encrypted) {
		return false
	}
	if !bytes.Equal(this.AppNonce, that1.AppNonce) {
		return false
	}
	if !bytes.Equal(this.NetId, that1.NetId) {
		return false
	}
	if !bytes.Equal(this.DevAddr, that1.DevAddr) {
		return false
	}
	if !this.DlSettings.Equal(that1.DlSettings) {
		return false
	}
	if this.RxDelay != that1.RxDelay {
		return false
	}
	if !this.CfList.Equal(that1.CfList) {
		return false
	}
	return true
}
func (this *DLSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DLSettings)
	if !ok {
		that2, ok := that.(DLSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rx1DrOffset != that1.Rx1DrOffset {
		return false
	}
	if this.Rx2Dr != that1.Rx2Dr {
		return false
	}
	return true
}
func (this *CFList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CFList)
	if !ok {
		that2, ok := that.(CFList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Freq) != len(that1.Freq) {
		return false
	}
	for i := range this.Freq {
		if this.Freq[i] != that1.Freq[i] {
			return false
		}
	}
	return true
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyPlan != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.FrequencyPlan))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.FCnt != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CodingRate) > 0 {
		i -= len(m.CodingRate)
		copy(dAtA[i:], m.CodingRate)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i--
		dAtA[i] = 0x72
	}
	if m.BitRate != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DataRate) > 0 {
		i -= len(m.DataRate)
		copy(dAtA[i:], m.DataRate)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DataRate)))
		i--
		dAtA[i] = 0x62
	}
	if m.Modulation != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
		i--
		dAtA[i] = 0x58
	}
	return len(dAtA) - i, nil
}

func (m *TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FCnt != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CodingRate) > 0 {
		i -= len(m.CodingRate)
		copy(dAtA[i:], m.CodingRate)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.CodingRate)))
		i--
		dAtA[i] = 0x72
	}
	if m.BitRate != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.BitRate))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DataRate) > 0 {
		i -= len(m.DataRate)
		copy(dAtA[i:], m.DataRate)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DataRate)))
		i--
		dAtA[i] = 0x62
	}
	if m.Modulation != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Modulation))
		i--
		dAtA[i] = 0x58
	}
	return len(dAtA) - i, nil
}

func (m *ActivationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivationMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyPlan != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.FrequencyPlan))
		i--
		dAtA[i] = 0x78
	}
	if m.CfList != nil {
		{
			size, err := m.CfList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RxDelay != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
		i--
		dAtA[i] = 0x68
	}
	if m.Rx2Dr != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2Dr))
		i--
		dAtA[i] = 0x60
	}
	if m.Rx1DrOffset != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DrOffset))
		i--
		dAtA[i] = 0x58
	}
	if len(m.NwkSKey) > 0 {
		i -= len(m.NwkSKey)
		copy(dAtA[i:], m.NwkSKey)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.NwkSKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DevAddr) > 0 {
		i -= len(m.DevAddr)
		copy(dAtA[i:], m.DevAddr)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DevAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevEui) > 0 {
		i -= len(m.DevEui)
		copy(dAtA[i:], m.DevEui)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DevEui)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppEui) > 0 {
		i -= len(m.AppEui)
		copy(dAtA[i:], m.AppEui)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.AppEui)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Mic) > 0 {
		i -= len(m.Mic)
		copy(dAtA[i:], m.Mic)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Mic)))
		i--
		dAtA[i] = 0x12
	}
	if m.MHdr != nil {
		{
			size, err := m.MHdr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message_MacPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_MacPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MacPayload != nil {
		{
			size, err := m.MacPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_JoinRequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinRequestPayload != nil {
		{
			size, err := m.JoinRequestPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_JoinAcceptPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinAcceptPayload != nil {
		{
			size, err := m.JoinAcceptPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHDR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MHDR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Major != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x10
	}
	if m.MType != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MACPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FrmPayload) > 0 {
		i -= len(m.FrmPayload)
		copy(dAtA[i:], m.FrmPayload)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.FrmPayload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FPort != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.FPort))
		i--
		dAtA[i] = 0x10
	}
	if m.FHdr != nil {
		{
			size, err := m.FHdr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FHDR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FHDR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FHDR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FOpts) > 0 {
		for iNdEx := len(m.FOpts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FOpts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLorawan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FCnt != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.FCnt))
		i--
		dAtA[i] = 0x18
	}
	if m.FCtrl != nil {
		{
			size, err := m.FCtrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DevAddr) > 0 {
		i -= len(m.DevAddr)
		copy(dAtA[i:], m.DevAddr)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DevAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FCtrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FCtrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FCtrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FPending {
		i--
		if m.FPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Ack {
		i--
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AdrAckReq {
		i--
		if m.AdrAckReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Adr {
		i--
		if m.Adr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MACCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MACCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MACCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cid != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JoinRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinRequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DevNonce) > 0 {
		i -= len(m.DevNonce)
		copy(dAtA[i:], m.DevNonce)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DevNonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevEui) > 0 {
		i -= len(m.DevEui)
		copy(dAtA[i:], m.DevEui)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DevEui)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppEui) > 0 {
		i -= len(m.AppEui)
		copy(dAtA[i:], m.AppEui)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.AppEui)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinAcceptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinAcceptPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinAcceptPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CfList != nil {
		{
			size, err := m.CfList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RxDelay != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.RxDelay))
		i--
		dAtA[i] = 0x30
	}
	if m.DlSettings != nil {
		{
			size, err := m.DlSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLorawan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DevAddr) > 0 {
		i -= len(m.DevAddr)
		copy(dAtA[i:], m.DevAddr)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.DevAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetId) > 0 {
		i -= len(m.NetId)
		copy(dAtA[i:], m.NetId)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.NetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppNonce) > 0 {
		i -= len(m.AppNonce)
		copy(dAtA[i:], m.AppNonce)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.AppNonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Encrypted) > 0 {
		i -= len(m.Encrypted)
		copy(dAtA[i:], m.Encrypted)
		i = encodeVarintLorawan(dAtA, i, uint64(len(m.Encrypted)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DLSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DLSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rx2Dr != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx2Dr))
		i--
		dAtA[i] = 0x10
	}
	if m.Rx1DrOffset != 0 {
		i = encodeVarintLorawan(dAtA, i, uint64(m.Rx1DrOffset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CFList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CFList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Freq) > 0 {
		dAtA11 := make([]byte, len(m.Freq)*10)
		var j10 int
		for _, num := range m.Freq {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintLorawan(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLorawan(dAtA []byte, offset int, v uint64) int {
	offset -= sovLorawan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMetadata(r randyLorawan, easy bool) *Metadata {
	this := &Metadata{}
	this.Modulation = Modulation([]int32{0, 1}[r.Intn(2)])
	this.DataRate = string(randStringLorawan(r))
	this.BitRate = uint32(r.Uint32())
	this.CodingRate = string(randStringLorawan(r))
	this.FCnt = uint32(r.Uint32())
	this.FrequencyPlan = FrequencyPlan([]int32{0, 1, 2, 3, 4, 5, 6, 61, 62, 7, 8, 9}[r.Intn(12)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTxConfiguration(r randyLorawan, easy bool) *TxConfiguration {
	this := &TxConfiguration{}
	this.Modulation = Modulation([]int32{0, 1}[r.Intn(2)])
	this.DataRate = string(randStringLorawan(r))
	this.BitRate = uint32(r.Uint32())
	this.CodingRate = string(randStringLorawan(r))
	this.FCnt = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedActivationMetadata(r randyLorawan, easy bool) *ActivationMetadata {
	this := &ActivationMetadata{}
	v1 := r.Intn(100)
	this.AppEui = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.AppEui[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.DevEui = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.DevEui[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.DevAddr = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.DevAddr[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.NwkSKey = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.NwkSKey[i] = byte(r.Intn(256))
	}
	this.Rx1DrOffset = uint32(r.Uint32())
	this.Rx2Dr = uint32(r.Uint32())
	this.RxDelay = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.CfList = NewPopulatedCFList(r, easy)
	}
	this.FrequencyPlan = FrequencyPlan([]int32{0, 1, 2, 3, 4, 5, 6, 61, 62, 7, 8, 9}[r.Intn(12)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessage(r randyLorawan, easy bool) *Message {
	this := &Message{}
	if r.Intn(5) != 0 {
		this.MHdr = NewPopulatedMHDR(r, easy)
	}
	v5 := r.Intn(100)
	this.Mic = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Mic[i] = byte(r.Intn(256))
	}
	oneofNumber_Payload := []int32{3, 4, 5}[r.Intn(3)]
	switch oneofNumber_Payload {
	case 3:
		this.Payload = NewPopulatedMessage_MacPayload(r, easy)
	case 4:
		this.Payload = NewPopulatedMessage_JoinRequestPayload(r, easy)
	case 5:
		this.Payload = NewPopulatedMessage_JoinAcceptPayload(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessage_MacPayload(r randyLorawan, easy bool) *Message_MacPayload {
	this := &Message_MacPayload{}
	this.MacPayload = NewPopulatedMACPayload(r, easy)
	return this
}
func NewPopulatedMessage_JoinRequestPayload(r randyLorawan, easy bool) *Message_JoinRequestPayload {
	this := &Message_JoinRequestPayload{}
	this.JoinRequestPayload = NewPopulatedJoinRequestPayload(r, easy)
	return this
}
func NewPopulatedMessage_JoinAcceptPayload(r randyLorawan, easy bool) *Message_JoinAcceptPayload {
	this := &Message_JoinAcceptPayload{}
	this.JoinAcceptPayload = NewPopulatedJoinAcceptPayload(r, easy)
	return this
}
func NewPopulatedMHDR(r randyLorawan, easy bool) *MHDR {
	this := &MHDR{}
	this.MType = MType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.Major = Major([]int32{0}[r.Intn(1)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACPayload(r randyLorawan, easy bool) *MACPayload {
	this := &MACPayload{}
	if r.Intn(5) != 0 {
		this.FHdr = NewPopulatedFHDR(r, easy)
	}
	this.FPort = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.FPort *= -1
	}
	v6 := r.Intn(100)
	this.FrmPayload = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.FrmPayload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFHDR(r randyLorawan, easy bool) *FHDR {
	this := &FHDR{}
	v7 := r.Intn(100)
	this.DevAddr = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.DevAddr[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.FCtrl = NewPopulatedFCtrl(r, easy)
	}
	this.FCnt = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.FOpts = make([]*MACCommand, v8)
		for i := 0; i < v8; i++ {
			this.FOpts[i] = NewPopulatedMACCommand(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFCtrl(r randyLorawan, easy bool) *FCtrl {
	this := &FCtrl{}
	this.Adr = bool(bool(r.Intn(2) == 0))
	this.AdrAckReq = bool(bool(r.Intn(2) == 0))
	this.Ack = bool(bool(r.Intn(2) == 0))
	this.FPending = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMACCommand(r randyLorawan, easy bool) *MACCommand {
	this := &MACCommand{}
	this.Cid = uint32(r.Uint32())
	v9 := r.Intn(100)
	this.Payload = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJoinRequestPayload(r randyLorawan, easy bool) *JoinRequestPayload {
	this := &JoinRequestPayload{}
	v10 := r.Intn(100)
	this.AppEui = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.AppEui[i] = byte(r.Intn(256))
	}
	v11 := r.Intn(100)
	this.DevEui = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.DevEui[i] = byte(r.Intn(256))
	}
	v12 := r.Intn(100)
	this.DevNonce = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.DevNonce[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJoinAcceptPayload(r randyLorawan, easy bool) *JoinAcceptPayload {
	this := &JoinAcceptPayload{}
	v13 := r.Intn(100)
	this.Encrypted = make([]byte, v13)
	for i := 0; i < v13; i++ {
		this.Encrypted[i] = byte(r.Intn(256))
	}
	v14 := r.Intn(100)
	this.AppNonce = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.AppNonce[i] = byte(r.Intn(256))
	}
	v15 := r.Intn(100)
	this.NetId = make([]byte, v15)
	for i := 0; i < v15; i++ {
		this.NetId[i] = byte(r.Intn(256))
	}
	v16 := r.Intn(100)
	this.DevAddr = make([]byte, v16)
	for i := 0; i < v16; i++ {
		this.DevAddr[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.DlSettings = NewPopulatedDLSettings(r, easy)
	}
	this.RxDelay = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.CfList = NewPopulatedCFList(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDLSettings(r randyLorawan, easy bool) *DLSettings {
	this := &DLSettings{}
	this.Rx1DrOffset = uint32(r.Uint32())
	this.Rx2Dr = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCFList(r randyLorawan, easy bool) *CFList {
	this := &CFList{}
	v17 := r.Intn(10)
	this.Freq = make([]uint32, v17)
	for i := 0; i < v17; i++ {
		this.Freq[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLorawan interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLorawan(r randyLorawan) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLorawan(r randyLorawan) string {
	v18 := r.Intn(100)
	tmps := make([]rune, v18)
	for i := 0; i < v18; i++ {
		tmps[i] = randUTF8RuneLorawan(r)
	}
	return string(tmps)
}
func randUnrecognizedLorawan(r randyLorawan, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLorawan(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLorawan(dAtA []byte, r randyLorawan, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		v19 := r.Int63()
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(v19))
	case 1:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLorawan(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLorawan(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if m.FrequencyPlan != 0 {
		n += 2 + sovLorawan(uint64(m.FrequencyPlan))
	}
	return n
}

func (m *TxConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Modulation != 0 {
		n += 1 + sovLorawan(uint64(m.Modulation))
	}
	l = len(m.DataRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.BitRate != 0 {
		n += 1 + sovLorawan(uint64(m.BitRate))
	}
	l = len(m.CodingRate)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	return n
}

func (m *ActivationMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.DevEui)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Rx1DrOffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DrOffset))
	}
	if m.Rx2Dr != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2Dr))
	}
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CfList != nil {
		l = m.CfList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FrequencyPlan != 0 {
		n += 1 + sovLorawan(uint64(m.FrequencyPlan))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MHdr != nil {
		l = m.MHdr.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.Mic)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Message_MacPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MacPayload != nil {
		l = m.MacPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinRequestPayload != nil {
		l = m.JoinRequestPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *Message_JoinAcceptPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinAcceptPayload != nil {
		l = m.JoinAcceptPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}
func (m *MHDR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *MACPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FHdr != nil {
		l = m.FHdr.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	l = len(m.FrmPayload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *FHDR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCtrl != nil {
		l = m.FCtrl.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, e := range m.FOpts {
			l = e.Size()
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *FCtrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Adr {
		n += 2
	}
	if m.AdrAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	return n
}

func (m *MACCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovLorawan(uint64(m.Cid))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *JoinRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.DevEui)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.DevNonce)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *JoinAcceptPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Encrypted)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.AppNonce)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.NetId)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.DlSettings != nil {
		l = m.DlSettings.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.RxDelay != 0 {
		n += 1 + sovLorawan(uint64(m.RxDelay))
	}
	if m.CfList != nil {
		l = m.CfList.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	return n
}

func (m *DLSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rx1DrOffset != 0 {
		n += 1 + sovLorawan(uint64(m.Rx1DrOffset))
	}
	if m.Rx2Dr != 0 {
		n += 1 + sovLorawan(uint64(m.Rx2Dr))
	}
	return n
}

func (m *CFList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Freq) > 0 {
		l = 0
		for _, e := range m.Freq {
			l += sovLorawan(uint64(e))
		}
		n += 1 + sovLorawan(uint64(l)) + l
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Modulation:` + fmt.Sprintf("%v", this.Modulation) + `,`,
		`DataRate:` + fmt.Sprintf("%v", this.DataRate) + `,`,
		`BitRate:` + fmt.Sprintf("%v", this.BitRate) + `,`,
		`CodingRate:` + fmt.Sprintf("%v", this.CodingRate) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FrequencyPlan:` + fmt.Sprintf("%v", this.FrequencyPlan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxConfiguration{`,
		`Modulation:` + fmt.Sprintf("%v", this.Modulation) + `,`,
		`DataRate:` + fmt.Sprintf("%v", this.DataRate) + `,`,
		`BitRate:` + fmt.Sprintf("%v", this.BitRate) + `,`,
		`CodingRate:` + fmt.Sprintf("%v", this.CodingRate) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationMetadata{`,
		`AppEui:` + fmt.Sprintf("%v", this.AppEui) + `,`,
		`DevEui:` + fmt.Sprintf("%v", this.DevEui) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`NwkSKey:` + fmt.Sprintf("%v", this.NwkSKey) + `,`,
		`Rx1DrOffset:` + fmt.Sprintf("%v", this.Rx1DrOffset) + `,`,
		`Rx2Dr:` + fmt.Sprintf("%v", this.Rx2Dr) + `,`,
		`RxDelay:` + fmt.Sprintf("%v", this.RxDelay) + `,`,
		`CfList:` + strings.Replace(this.CfList.String(), "CFList", "CFList", 1) + `,`,
		`FrequencyPlan:` + fmt.Sprintf("%v", this.FrequencyPlan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`MHdr:` + strings.Replace(this.MHdr.String(), "MHDR", "MHDR", 1) + `,`,
		`Mic:` + fmt.Sprintf("%v", this.Mic) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_MacPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_MacPayload{`,
		`MacPayload:` + strings.Replace(fmt.Sprintf("%v", this.MacPayload), "MACPayload", "MACPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinRequestPayload{`,
		`JoinRequestPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinRequestPayload), "JoinRequestPayload", "JoinRequestPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_JoinAcceptPayload{`,
		`JoinAcceptPayload:` + strings.Replace(fmt.Sprintf("%v", this.JoinAcceptPayload), "JoinAcceptPayload", "JoinAcceptPayload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MHDR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MHDR{`,
		`MType:` + fmt.Sprintf("%v", this.MType) + `,`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACPayload{`,
		`FHdr:` + strings.Replace(this.FHdr.String(), "FHDR", "FHDR", 1) + `,`,
		`FPort:` + fmt.Sprintf("%v", this.FPort) + `,`,
		`FrmPayload:` + fmt.Sprintf("%v", this.FrmPayload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FHDR) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFOpts := "[]*MACCommand{"
	for _, f := range this.FOpts {
		repeatedStringForFOpts += strings.Replace(f.String(), "MACCommand", "MACCommand", 1) + ","
	}
	repeatedStringForFOpts += "}"
	s := strings.Join([]string{`&FHDR{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`FCtrl:` + strings.Replace(this.FCtrl.String(), "FCtrl", "FCtrl", 1) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`FOpts:` + repeatedStringForFOpts + `,`,
		`}`,
	}, "")
	return s
}
func (this *FCtrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FCtrl{`,
		`Adr:` + fmt.Sprintf("%v", this.Adr) + `,`,
		`AdrAckReq:` + fmt.Sprintf("%v", this.AdrAckReq) + `,`,
		`Ack:` + fmt.Sprintf("%v", this.Ack) + `,`,
		`FPending:` + fmt.Sprintf("%v", this.FPending) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACCommand{`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinRequestPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinRequestPayload{`,
		`AppEui:` + fmt.Sprintf("%v", this.AppEui) + `,`,
		`DevEui:` + fmt.Sprintf("%v", this.DevEui) + `,`,
		`DevNonce:` + fmt.Sprintf("%v", this.DevNonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinAcceptPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinAcceptPayload{`,
		`Encrypted:` + fmt.Sprintf("%v", this.Encrypted) + `,`,
		`AppNonce:` + fmt.Sprintf("%v", this.AppNonce) + `,`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`DlSettings:` + strings.Replace(this.DlSettings.String(), "DLSettings", "DLSettings", 1) + `,`,
		`RxDelay:` + fmt.Sprintf("%v", this.RxDelay) + `,`,
		`CfList:` + strings.Replace(this.CfList.String(), "CFList", "CFList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DLSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DLSettings{`,
		`Rx1DrOffset:` + fmt.Sprintf("%v", this.Rx1DrOffset) + `,`,
		`Rx2Dr:` + fmt.Sprintf("%v", this.Rx2Dr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFList{`,
		`Freq:` + fmt.Sprintf("%v", this.Freq) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLorawan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= Modulation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			m.FrequencyPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyPlan |= FrequencyPlan(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= Modulation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			m.BitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodingRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = append(m.AppEui[:0], dAtA[iNdEx:postIndex]...)
			if m.AppEui == nil {
				m.AppEui = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = append(m.DevEui[:0], dAtA[iNdEx:postIndex]...)
			if m.DevEui == nil {
				m.DevEui = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DrOffset", wireType)
			}
			m.Rx1DrOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DrOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Dr", wireType)
			}
			m.Rx2Dr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Dr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CfList == nil {
				m.CfList = &CFList{}
			}
			if err := m.CfList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			m.FrequencyPlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyPlan |= FrequencyPlan(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHdr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MHdr == nil {
				m.MHdr = &MHDR{}
			}
			if err := m.MHdr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mic = append(m.Mic[:0], dAtA[iNdEx:postIndex]...)
			if m.Mic == nil {
				m.Mic = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_MacPayload{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinRequestPayload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAcceptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinAcceptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Message_JoinAcceptPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= MType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= Major(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHdr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FHdr == nil {
				m.FHdr = &FHDR{}
			}
			if err := m.FHdr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrmPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrmPayload = append(m.FrmPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.FrmPayload == nil {
				m.FrmPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FHDR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FCtrl == nil {
				m.FCtrl = &FCtrl{}
			}
			if err := m.FCtrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts, &MACCommand{})
			if err := m.FOpts[len(m.FOpts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FCtrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Adr = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdrAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdrAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MACCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = append(m.AppEui[:0], dAtA[iNdEx:postIndex]...)
			if m.AppEui == nil {
				m.AppEui = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = append(m.DevEui[:0], dAtA[iNdEx:postIndex]...)
			if m.DevEui == nil {
				m.DevEui = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevNonce = append(m.DevNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.DevNonce == nil {
				m.DevNonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinAcceptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinAcceptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinAcceptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encrypted = append(m.Encrypted[:0], dAtA[iNdEx:postIndex]...)
			if m.Encrypted == nil {
				m.Encrypted = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppNonce = append(m.AppNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.AppNonce == nil {
				m.AppNonce = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetId = append(m.NetId[:0], dAtA[iNdEx:postIndex]...)
			if m.NetId == nil {
				m.NetId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DlSettings == nil {
				m.DlSettings = &DLSettings{}
			}
			if err := m.DlSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDelay", wireType)
			}
			m.RxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLorawan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CfList == nil {
				m.CfList = &CFList{}
			}
			if err := m.CfList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1DrOffset", wireType)
			}
			m.Rx1DrOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx1DrOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2Dr", wireType)
			}
			m.Rx2Dr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rx2Dr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Freq = append(m.Freq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLorawan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLorawan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Freq) == 0 {
					m.Freq = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLorawan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Freq = append(m.Freq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Freq", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLorawan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLorawan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLorawan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLorawan = fmt.Errorf("proto: unexpected end of group")
)
