// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/discovery/discovery.proto

package discovery

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Metadata struct {
	// Types that are valid to be assigned to Metadata:
	//	*Metadata_GatewayId
	//	*Metadata_DevAddrPrefix
	//	*Metadata_AppId
	//	*Metadata_AppEui
	Metadata             isMetadata_Metadata `protobuf_oneof:"metadata"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

type isMetadata_Metadata interface {
	isMetadata_Metadata()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Metadata_GatewayId struct {
	GatewayId string `protobuf:"bytes,10,opt,name=gateway_id,json=gatewayId,proto3,oneof" json:"gateway_id,omitempty"`
}
type Metadata_DevAddrPrefix struct {
	DevAddrPrefix []byte `protobuf:"bytes,20,opt,name=dev_addr_prefix,json=devAddrPrefix,proto3,oneof" json:"dev_addr_prefix,omitempty"`
}
type Metadata_AppId struct {
	AppId string `protobuf:"bytes,30,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
}
type Metadata_AppEui struct {
	AppEui []byte `protobuf:"bytes,31,opt,name=app_eui,json=appEui,proto3,oneof" json:"app_eui,omitempty"`
}

func (*Metadata_GatewayId) isMetadata_Metadata()     {}
func (*Metadata_DevAddrPrefix) isMetadata_Metadata() {}
func (*Metadata_AppId) isMetadata_Metadata()         {}
func (*Metadata_AppEui) isMetadata_Metadata()        {}

func (m *Metadata) GetMetadata() isMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Metadata) GetGatewayId() string {
	if x, ok := m.GetMetadata().(*Metadata_GatewayId); ok {
		return x.GatewayId
	}
	return ""
}

func (m *Metadata) GetDevAddrPrefix() []byte {
	if x, ok := m.GetMetadata().(*Metadata_DevAddrPrefix); ok {
		return x.DevAddrPrefix
	}
	return nil
}

func (m *Metadata) GetAppId() string {
	if x, ok := m.GetMetadata().(*Metadata_AppId); ok {
		return x.AppId
	}
	return ""
}

func (m *Metadata) GetAppEui() []byte {
	if x, ok := m.GetMetadata().(*Metadata_AppEui); ok {
		return x.AppEui
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metadata_GatewayId)(nil),
		(*Metadata_DevAddrPrefix)(nil),
		(*Metadata_AppId)(nil),
		(*Metadata_AppEui)(nil),
	}
}

// The Announcement of a service (also called component)
type Announcement struct {
	// The ID of the component
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the component (router/broker/handler)
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Service version in the form "[version]-[commit] ([build date])"
	ServiceVersion string `protobuf:"bytes,3,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// Description of the component
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// URL with documentation or more information about this component
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Indicates whether this service is part of The Things Network (the public community network)
	Public bool `protobuf:"varint,6,opt,name=public,proto3" json:"public,omitempty"`
	// Comma-separated network addresses in the form "domain1:port,domain2:port,domain3:port" (currently we only use the first)
	NetAddress string `protobuf:"bytes,11,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"`
	// ECDSA public key of this component
	PublicKey string `protobuf:"bytes,12,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// TLS Certificate for gRPC on net_address (if TLS is enabled)
	Certificate string `protobuf:"bytes,13,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Contains the address where the HTTP API is exposed (if there is one).
	// Format of api_address: `http(s)://domain(:port)`
	// default http port is 80, default https port is 443.
	ApiAddress string `protobuf:"bytes,14,opt,name=api_address,json=apiAddress,proto3" json:"api_address,omitempty"`
	// Contains the address where the MQTT API is exposed (if there is one)
	// Format of mqtt_address: `(mqtt(s)://)host(:port)`
	// default mqtt port is 1883, default mqtts port is 8883.
	// Examples:
	// if `host:port` then `mqtt://host:port`
	// if `host:8883` then `mqtts://host:8883`
	// if `host` then `mqtt://host:1883` and `mqtts://host:8883`
	// if `mqtt://host` then `mqtt://host:1883`
	// if `mqtts://host` then `mqtt://host:1883` and `mqtts://host:8883`
	MqttAddress string `protobuf:"bytes,15,opt,name=mqtt_address,json=mqttAddress,proto3" json:"mqtt_address,omitempty"`
	// Contains the address where the AMQP API is exposed (if there is one)
	// Format of amqp_address: `(amqp(s)://)host(:port)`
	// default amqp port is 5672, default amqps port is 5671.
	// Examples:
	// if `host:port` then `amqp://host:port`
	// if `host:5671` then `amqps://host:5671`
	// if `host` then `amqp://host:5672` and `amqps://host:5671`
	// if `amqp://host` then `amqp://host:5672`
	// if `amqps://host` then `amqp://host:5672` and `amqps://host:5671`
	AmqpAddress string `protobuf:"bytes,16,opt,name=amqp_address,json=amqpAddress,proto3" json:"amqp_address,omitempty"`
	// Metadata for this component
	Metadata             []*Metadata `protobuf:"bytes,22,rep,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Announcement) Reset()      { *m = Announcement{} }
func (*Announcement) ProtoMessage() {}
func (*Announcement) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{1}
}
func (m *Announcement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Announcement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Announcement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Announcement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Announcement.Merge(m, src)
}
func (m *Announcement) XXX_Size() int {
	return m.Size()
}
func (m *Announcement) XXX_DiscardUnknown() {
	xxx_messageInfo_Announcement.DiscardUnknown(m)
}

var xxx_messageInfo_Announcement proto.InternalMessageInfo

func (m *Announcement) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Announcement) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Announcement) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *Announcement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Announcement) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Announcement) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Announcement) GetNetAddress() string {
	if m != nil {
		return m.NetAddress
	}
	return ""
}

func (m *Announcement) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Announcement) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *Announcement) GetApiAddress() string {
	if m != nil {
		return m.ApiAddress
	}
	return ""
}

func (m *Announcement) GetMqttAddress() string {
	if m != nil {
		return m.MqttAddress
	}
	return ""
}

func (m *Announcement) GetAmqpAddress() string {
	if m != nil {
		return m.AmqpAddress
	}
	return ""
}

func (m *Announcement) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type GetServiceRequest struct {
	// The name of the service (router/broker/handler)
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceRequest) Reset()      { *m = GetServiceRequest{} }
func (*GetServiceRequest) ProtoMessage() {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{2}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(m, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

func (m *GetServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// The identifier of the service that should be returned
type GetRequest struct {
	// The ID of the service
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the service (router/broker/handler)
	ServiceName          string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{3}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// The metadata to add or remove from an announement
type MetadataRequest struct {
	// The ID of the service that should be modified
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the service (router/broker/handler) that should be modified
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Metadata to add or remove
	Metadata             *Metadata `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MetadataRequest) Reset()      { *m = MetadataRequest{} }
func (*MetadataRequest) ProtoMessage() {}
func (*MetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{4}
}
func (m *MetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRequest.Merge(m, src)
}
func (m *MetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRequest proto.InternalMessageInfo

func (m *MetadataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MetadataRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MetadataRequest) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// A list of announcements
type AnnouncementsResponse struct {
	Services             []*Announcement `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AnnouncementsResponse) Reset()      { *m = AnnouncementsResponse{} }
func (*AnnouncementsResponse) ProtoMessage() {}
func (*AnnouncementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{5}
}
func (m *AnnouncementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnnouncementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnnouncementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnnouncementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnouncementsResponse.Merge(m, src)
}
func (m *AnnouncementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AnnouncementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnouncementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnnouncementsResponse proto.InternalMessageInfo

func (m *AnnouncementsResponse) GetServices() []*Announcement {
	if m != nil {
		return m.Services
	}
	return nil
}

type GetByAppIDRequest struct {
	AppId                string   `protobuf:"bytes,30,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByAppIDRequest) Reset()      { *m = GetByAppIDRequest{} }
func (*GetByAppIDRequest) ProtoMessage() {}
func (*GetByAppIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{6}
}
func (m *GetByAppIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByAppIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByAppIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByAppIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByAppIDRequest.Merge(m, src)
}
func (m *GetByAppIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByAppIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByAppIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByAppIDRequest proto.InternalMessageInfo

func (m *GetByAppIDRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

type GetByGatewayIDRequest struct {
	GatewayId            string   `protobuf:"bytes,30,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByGatewayIDRequest) Reset()      { *m = GetByGatewayIDRequest{} }
func (*GetByGatewayIDRequest) ProtoMessage() {}
func (*GetByGatewayIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{7}
}
func (m *GetByGatewayIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByGatewayIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByGatewayIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByGatewayIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByGatewayIDRequest.Merge(m, src)
}
func (m *GetByGatewayIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByGatewayIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByGatewayIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByGatewayIDRequest proto.InternalMessageInfo

func (m *GetByGatewayIDRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type GetByAppEUIRequest struct {
	AppEui               []byte   `protobuf:"bytes,31,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByAppEUIRequest) Reset()      { *m = GetByAppEUIRequest{} }
func (*GetByAppEUIRequest) ProtoMessage() {}
func (*GetByAppEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb652a73347df9a, []int{8}
}
func (m *GetByAppEUIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetByAppEUIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetByAppEUIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetByAppEUIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByAppEUIRequest.Merge(m, src)
}
func (m *GetByAppEUIRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetByAppEUIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByAppEUIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByAppEUIRequest proto.InternalMessageInfo

func (m *GetByAppEUIRequest) GetAppEui() []byte {
	if m != nil {
		return m.AppEui
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "discovery.Metadata")
	golang_proto.RegisterType((*Metadata)(nil), "discovery.Metadata")
	proto.RegisterType((*Announcement)(nil), "discovery.Announcement")
	golang_proto.RegisterType((*Announcement)(nil), "discovery.Announcement")
	proto.RegisterType((*GetServiceRequest)(nil), "discovery.GetServiceRequest")
	golang_proto.RegisterType((*GetServiceRequest)(nil), "discovery.GetServiceRequest")
	proto.RegisterType((*GetRequest)(nil), "discovery.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "discovery.GetRequest")
	proto.RegisterType((*MetadataRequest)(nil), "discovery.MetadataRequest")
	golang_proto.RegisterType((*MetadataRequest)(nil), "discovery.MetadataRequest")
	proto.RegisterType((*AnnouncementsResponse)(nil), "discovery.AnnouncementsResponse")
	golang_proto.RegisterType((*AnnouncementsResponse)(nil), "discovery.AnnouncementsResponse")
	proto.RegisterType((*GetByAppIDRequest)(nil), "discovery.GetByAppIDRequest")
	golang_proto.RegisterType((*GetByAppIDRequest)(nil), "discovery.GetByAppIDRequest")
	proto.RegisterType((*GetByGatewayIDRequest)(nil), "discovery.GetByGatewayIDRequest")
	golang_proto.RegisterType((*GetByGatewayIDRequest)(nil), "discovery.GetByGatewayIDRequest")
	proto.RegisterType((*GetByAppEUIRequest)(nil), "discovery.GetByAppEUIRequest")
	golang_proto.RegisterType((*GetByAppEUIRequest)(nil), "discovery.GetByAppEUIRequest")
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/discovery/discovery.proto", fileDescriptor_4eb652a73347df9a)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/discovery/discovery.proto", fileDescriptor_4eb652a73347df9a)
}

var fileDescriptor_4eb652a73347df9a = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x3d, 0x6c, 0xdb, 0x56,
	0x10, 0xe6, 0xb3, 0x12, 0x55, 0x3a, 0x29, 0xb2, 0xfb, 0x5a, 0xdb, 0xac, 0x1a, 0x3f, 0x2b, 0x44,
	0x8b, 0xaa, 0x01, 0x4a, 0x01, 0x0e, 0x10, 0xa0, 0xe8, 0x50, 0xc8, 0xb5, 0xa1, 0x08, 0x69, 0x02,
	0x43, 0x4d, 0x3b, 0x74, 0x11, 0x9e, 0xc5, 0xb3, 0xfc, 0x10, 0x89, 0xa4, 0xc9, 0x27, 0xa5, 0x42,
	0x10, 0x20, 0xe8, 0x94, 0xb1, 0x40, 0x51, 0xa0, 0x63, 0xc7, 0xa0, 0x93, 0xc7, 0x8c, 0x19, 0x33,
	0x06, 0xe8, 0x92, 0x31, 0x22, 0x3b, 0x64, 0xcc, 0x54, 0x64, 0x2a, 0x0a, 0xfe, 0x8a, 0x92, 0xa3,
	0xfe, 0x65, 0x23, 0xef, 0xbe, 0xfb, 0xee, 0xde, 0xdd, 0x77, 0xef, 0xc1, 0xa7, 0x7d, 0x21, 0x8f,
	0x47, 0x87, 0x7a, 0xcf, 0x1a, 0x36, 0x6e, 0x1d, 0xe3, 0xad, 0x63, 0x61, 0xf6, 0xdd, 0x9b, 0x28,
	0xef, 0x58, 0xce, 0xed, 0x06, 0xb7, 0x45, 0xc3, 0x10, 0x6e, 0xcf, 0x1a, 0xa3, 0x33, 0x99, 0x7d,
	0xe9, 0xb6, 0x63, 0x49, 0x8b, 0x16, 0x53, 0x43, 0xf5, 0xfd, 0xbe, 0x65, 0xf5, 0x07, 0xd8, 0x08,
	0x1d, 0x87, 0xa3, 0xa3, 0x06, 0x0e, 0x6d, 0x19, 0xe3, 0xaa, 0x17, 0x63, 0x67, 0xc0, 0xc6, 0x4d,
	0xd3, 0x92, 0x5c, 0x0a, 0xcb, 0x74, 0x23, 0xaf, 0xf6, 0x13, 0x81, 0xc2, 0x0d, 0x94, 0xdc, 0xe0,
	0x92, 0xd3, 0x6d, 0x80, 0x3e, 0x97, 0x78, 0x87, 0x4f, 0xba, 0xc2, 0x50, 0xa1, 0x46, 0xea, 0xc5,
	0x6b, 0x4a, 0xa7, 0x18, 0xdb, 0xda, 0x06, 0xad, 0xc3, 0xaa, 0x81, 0xe3, 0x2e, 0x37, 0x0c, 0xa7,
	0x6b, 0x3b, 0x78, 0x24, 0xbe, 0x53, 0xdf, 0xad, 0x91, 0x7a, 0xf9, 0x9a, 0xd2, 0xb9, 0x60, 0xe0,
	0xb8, 0x69, 0x18, 0xce, 0x41, 0x68, 0xa6, 0x9b, 0x90, 0xe7, 0xb6, 0x1d, 0xd0, 0xb0, 0x98, 0xe6,
	0x3c, 0xb7, 0xed, 0xb6, 0x41, 0xdf, 0x83, 0xb7, 0x02, 0x07, 0x8e, 0x84, 0xba, 0x1d, 0x87, 0x06,
	0xc8, 0xfd, 0x91, 0xd8, 0x05, 0x28, 0x0c, 0xe3, 0x52, 0xb4, 0xd3, 0x1c, 0x94, 0x9b, 0xa6, 0x69,
	0x8d, 0xcc, 0x1e, 0x0e, 0xd1, 0x94, 0xb4, 0x02, 0x2b, 0xc2, 0x50, 0x49, 0x40, 0xd6, 0x59, 0x11,
	0x06, 0xbd, 0x04, 0x65, 0x17, 0x9d, 0xb1, 0xe8, 0x61, 0xd7, 0xe4, 0x43, 0x54, 0x57, 0x42, 0x4f,
	0x29, 0xb6, 0xdd, 0xe4, 0x43, 0xa4, 0x1f, 0xc1, 0x6a, 0x02, 0x19, 0xa3, 0xe3, 0x0a, 0xcb, 0x54,
	0x73, 0x21, 0xaa, 0x12, 0x9b, 0xbf, 0x89, 0xac, 0xb4, 0x06, 0x25, 0x03, 0xdd, 0x9e, 0x23, 0xec,
	0xa0, 0x35, 0xea, 0xb9, 0x88, 0x2a, 0x63, 0xa2, 0x6b, 0x90, 0x1b, 0x39, 0x03, 0xf5, 0x7c, 0xe8,
	0x09, 0x3e, 0xe9, 0x06, 0xe4, 0xed, 0xd1, 0xe1, 0x40, 0xf4, 0xd4, 0x7c, 0x8d, 0xd4, 0x0b, 0x9d,
	0xf8, 0x8f, 0x6e, 0x43, 0xc9, 0x44, 0x19, 0xb6, 0x08, 0x5d, 0x57, 0x2d, 0x85, 0x11, 0x60, 0xa2,
	0x6c, 0x46, 0x16, 0xba, 0x05, 0x10, 0x41, 0xbb, 0xb7, 0x71, 0xa2, 0x96, 0x43, 0x7f, 0x31, 0xb2,
	0x5c, 0xc7, 0x49, 0x50, 0x4b, 0x0f, 0x1d, 0x29, 0x8e, 0x44, 0x8f, 0x4b, 0x54, 0x2f, 0x44, 0xb5,
	0x64, 0x4c, 0x41, 0x06, 0x6e, 0x8b, 0x34, 0x43, 0x25, 0xca, 0xc0, 0x6d, 0x91, 0x64, 0xb8, 0x04,
	0xe5, 0xe1, 0x89, 0x9c, 0xd5, 0xb0, 0x1a, 0x71, 0x04, 0xb6, 0x0c, 0x84, 0x0f, 0x4f, 0xec, 0x14,
	0xb2, 0x16, 0x41, 0x02, 0x5b, 0x02, 0x69, 0xcc, 0xa6, 0xa1, 0x6e, 0xd4, 0x72, 0xf5, 0xd2, 0xce,
	0x3b, 0xfa, 0x4c, 0x83, 0x89, 0x66, 0x3a, 0xb3, 0x91, 0x5d, 0x85, 0xb7, 0x5b, 0x28, 0xbf, 0x8a,
	0x5a, 0xdb, 0xc1, 0x93, 0x11, 0xba, 0xf2, 0xcc, 0x98, 0xc8, 0x99, 0x31, 0x69, 0x9f, 0x03, 0xb4,
	0x50, 0x26, 0x01, 0xff, 0x7d, 0xce, 0xda, 0x08, 0x56, 0xd3, 0x72, 0xfe, 0x37, 0xcb, 0xdc, 0x79,
	0x83, 0xa9, 0xfc, 0xe3, 0x79, 0xbf, 0x84, 0xf5, 0xac, 0x42, 0xdd, 0x0e, 0xba, 0xb6, 0x65, 0xba,
	0x48, 0xaf, 0x40, 0x21, 0x26, 0x76, 0x55, 0x12, 0x76, 0x6e, 0x33, 0xc3, 0x94, 0x8d, 0xe9, 0xa4,
	0x40, 0xed, 0x72, 0xd8, 0xbd, 0xdd, 0x49, 0xd3, 0xb6, 0xdb, 0x7b, 0xc9, 0x31, 0xd6, 0xe7, 0xb7,
	0x28, 0xde, 0x21, 0xed, 0x2a, 0xac, 0x87, 0xd8, 0x56, 0xbc, 0x98, 0x29, 0x7e, 0x6b, 0x6e, 0x81,
	0xa3, 0x98, 0xd9, 0xfa, 0x6a, 0x9f, 0x00, 0x4d, 0x72, 0xec, 0x7f, 0xdd, 0x4e, 0x82, 0x36, 0x17,
	0x36, 0x32, 0xd9, 0xc7, 0x9d, 0x3f, 0xcf, 0x41, 0x71, 0x2f, 0xa9, 0x9b, 0x7e, 0x06, 0x85, 0xa4,
	0x74, 0xba, 0xec, 0x3c, 0xd5, 0x0d, 0x3d, 0xba, 0x6d, 0xf4, 0xe4, 0x2a, 0xd2, 0xf7, 0x83, 0xab,
	0x88, 0x5a, 0x90, 0x6f, 0xa1, 0x6c, 0x0e, 0x06, 0xf4, 0x62, 0x26, 0xf4, 0x8c, 0x5c, 0xaa, 0xb5,
	0x25, 0xc4, 0x69, 0x73, 0xb5, 0x0f, 0xbf, 0xff, 0xed, 0xf7, 0x1f, 0x57, 0xb6, 0xe9, 0x56, 0x78,
	0x99, 0xa5, 0xfe, 0xc6, 0xdd, 0xec, 0x7c, 0xef, 0x51, 0x0e, 0xb9, 0x16, 0x4a, 0xba, 0x3e, 0x9f,
	0x2d, 0x49, 0xb3, 0xac, 0x7e, 0xed, 0x72, 0xc8, 0xfe, 0x01, 0xd5, 0xfe, 0x96, 0xbd, 0x71, 0x57,
	0x18, 0xf7, 0x68, 0x13, 0x4a, 0x4d, 0xc3, 0x48, 0x2f, 0xcf, 0xea, 0xeb, 0xd4, 0x12, 0xe7, 0x5b,
	0xd6, 0x96, 0x3d, 0xa8, 0xec, 0xe1, 0x00, 0x25, 0xbe, 0x11, 0xcb, 0x17, 0xe1, 0x02, 0xc5, 0xd2,
	0x59, 0x6c, 0xf0, 0xbc, 0xa2, 0x96, 0x9e, 0x9c, 0x5e, 0x87, 0xca, 0xbc, 0xa6, 0x68, 0x6d, 0x91,
	0x68, 0x51, 0x6e, 0xcb, 0xc9, 0xf6, 0xa1, 0x94, 0x11, 0x1a, 0xdd, 0x7a, 0x4d, 0x49, 0x33, 0x01,
	0x2e, 0xa5, 0xd9, 0xa1, 0xb0, 0x96, 0xea, 0xef, 0x06, 0x37, 0x79, 0x1f, 0x9d, 0xdd, 0x3f, 0xc8,
	0x93, 0x29, 0x23, 0x4f, 0xa7, 0x8c, 0x3c, 0x9b, 0x32, 0xe5, 0xf9, 0x94, 0x29, 0x2f, 0xa6, 0x4c,
	0x79, 0x39, 0x65, 0xca, 0xab, 0x29, 0x23, 0xf7, 0x3d, 0x46, 0x1e, 0x78, 0x4c, 0x79, 0xe8, 0x31,
	0x72, 0xea, 0x31, 0xe5, 0x91, 0xc7, 0x94, 0xc7, 0x1e, 0x53, 0x9e, 0x78, 0x8c, 0x3c, 0xf5, 0x18,
	0x79, 0xe6, 0x31, 0xe5, 0xb9, 0xc7, 0xc8, 0x0b, 0x8f, 0x29, 0x2f, 0x3d, 0x46, 0x5e, 0x79, 0x4c,
	0xb9, 0xef, 0x33, 0xe5, 0x81, 0xcf, 0xc8, 0x0f, 0x3e, 0x53, 0x7e, 0xf6, 0x19, 0xf9, 0xc5, 0x67,
	0xca, 0x43, 0x9f, 0x29, 0xa7, 0x3e, 0x23, 0x8f, 0x7c, 0x46, 0x1e, 0xfb, 0x8c, 0x80, 0x66, 0x39,
	0x7d, 0x5d, 0x1e, 0xa3, 0x0c, 0x5f, 0x68, 0x33, 0x7a, 0xa1, 0x75, 0x6e, 0x8b, 0x59, 0xed, 0xbb,
	0x95, 0xb4, 0xd8, 0x83, 0x60, 0x40, 0x07, 0xe4, 0xdb, 0x8f, 0xff, 0xf5, 0xf3, 0xfe, 0xeb, 0x0a,
	0x5b, 0x04, 0xe8, 0xcd, 0x83, 0xb6, 0x9e, 0x52, 0x1e, 0xe6, 0xc3, 0xa9, 0x5f, 0xf9, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0x38, 0xc3, 0x47, 0x33, 0x08, 0x00, 0x00,
}

func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Metadata == nil {
		if this.Metadata != nil {
			return false
		}
	} else if this.Metadata == nil {
		return false
	} else if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *Metadata_GatewayId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata_GatewayId)
	if !ok {
		that2, ok := that.(Metadata_GatewayId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GatewayId != that1.GatewayId {
		return false
	}
	return true
}
func (this *Metadata_DevAddrPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata_DevAddrPrefix)
	if !ok {
		that2, ok := that.(Metadata_DevAddrPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.DevAddrPrefix, that1.DevAddrPrefix) {
		return false
	}
	return true
}
func (this *Metadata_AppId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata_AppId)
	if !ok {
		that2, ok := that.(Metadata_AppId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	return true
}
func (this *Metadata_AppEui) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata_AppEui)
	if !ok {
		that2, ok := that.(Metadata_AppEui)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AppEui, that1.AppEui) {
		return false
	}
	return true
}
func (this *Announcement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Announcement)
	if !ok {
		that2, ok := that.(Announcement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.ServiceVersion != that1.ServiceVersion {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Public != that1.Public {
		return false
	}
	if this.NetAddress != that1.NetAddress {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.Certificate != that1.Certificate {
		return false
	}
	if this.ApiAddress != that1.ApiAddress {
		return false
	}
	if this.MqttAddress != that1.MqttAddress {
		return false
	}
	if this.AmqpAddress != that1.AmqpAddress {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	return true
}
func (this *GetServiceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetServiceRequest)
	if !ok {
		that2, ok := that.(GetServiceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	return true
}
func (this *MetadataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataRequest)
	if !ok {
		that2, ok := that.(MetadataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *AnnouncementsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnnouncementsResponse)
	if !ok {
		that2, ok := that.(AnnouncementsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *GetByAppIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetByAppIDRequest)
	if !ok {
		that2, ok := that.(GetByAppIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	return true
}
func (this *GetByGatewayIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetByGatewayIDRequest)
	if !ok {
		that2, ok := that.(GetByGatewayIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GatewayId != that1.GatewayId {
		return false
	}
	return true
}
func (this *GetByAppEUIRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetByAppEUIRequest)
	if !ok {
		that2, ok := that.(GetByAppEUIRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.AppEui, that1.AppEui) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryClient interface {
	// Announce a component to the Discovery server.
	// A call to `Announce` does not processes the `metadata` field, so you can safely leave this field empty.
	// Adding or removing Metadata should be done with the `AddMetadata` and `DeleteMetadata` methods.
	Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*types.Empty, error)
	// Get all announcements for a specific service type
	GetAll(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*AnnouncementsResponse, error)
	// Get a specific announcement
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Announcement, error)
	// Add metadata to an announement
	AddMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete metadata from an announcement
	DeleteMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetByAppID(ctx context.Context, in *GetByAppIDRequest, opts ...grpc.CallOption) (*Announcement, error)
	GetByGatewayID(ctx context.Context, in *GetByGatewayIDRequest, opts ...grpc.CallOption) (*Announcement, error)
	GetByAppEUI(ctx context.Context, in *GetByAppEUIRequest, opts ...grpc.CallOption) (*Announcement, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetAll(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*AnnouncementsResponse, error) {
	out := new(AnnouncementsResponse)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) AddMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/AddMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) DeleteMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/DeleteMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetByAppID(ctx context.Context, in *GetByAppIDRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/GetByAppID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetByGatewayID(ctx context.Context, in *GetByGatewayIDRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/GetByGatewayID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) GetByAppEUI(ctx context.Context, in *GetByAppEUIRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/GetByAppEUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
type DiscoveryServer interface {
	// Announce a component to the Discovery server.
	// A call to `Announce` does not processes the `metadata` field, so you can safely leave this field empty.
	// Adding or removing Metadata should be done with the `AddMetadata` and `DeleteMetadata` methods.
	Announce(context.Context, *Announcement) (*types.Empty, error)
	// Get all announcements for a specific service type
	GetAll(context.Context, *GetServiceRequest) (*AnnouncementsResponse, error)
	// Get a specific announcement
	Get(context.Context, *GetRequest) (*Announcement, error)
	// Add metadata to an announement
	AddMetadata(context.Context, *MetadataRequest) (*types.Empty, error)
	// Delete metadata from an announcement
	DeleteMetadata(context.Context, *MetadataRequest) (*types.Empty, error)
	GetByAppID(context.Context, *GetByAppIDRequest) (*Announcement, error)
	GetByGatewayID(context.Context, *GetByGatewayIDRequest) (*Announcement, error)
	GetByAppEUI(context.Context, *GetByAppEUIRequest) (*Announcement, error)
}

// UnimplementedDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (*UnimplementedDiscoveryServer) Announce(ctx context.Context, req *Announcement) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (*UnimplementedDiscoveryServer) GetAll(ctx context.Context, req *GetServiceRequest) (*AnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedDiscoveryServer) Get(ctx context.Context, req *GetRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDiscoveryServer) AddMetadata(ctx context.Context, req *MetadataRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadata not implemented")
}
func (*UnimplementedDiscoveryServer) DeleteMetadata(ctx context.Context, req *MetadataRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (*UnimplementedDiscoveryServer) GetByAppID(ctx context.Context, req *GetByAppIDRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAppID not implemented")
}
func (*UnimplementedDiscoveryServer) GetByGatewayID(ctx context.Context, req *GetByGatewayIDRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGatewayID not implemented")
}
func (*UnimplementedDiscoveryServer) GetByAppEUI(ctx context.Context, req *GetByAppEUIRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAppEUI not implemented")
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Announce(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetAll(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/AddMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).AddMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/DeleteMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).DeleteMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetByAppID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetByAppID(ctx, req.(*GetByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetByGatewayID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByGatewayIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetByGatewayID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetByGatewayID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetByGatewayID(ctx, req.(*GetByGatewayIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_GetByAppEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetByAppEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/GetByAppEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetByAppEUI(ctx, req.(*GetByAppEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Discovery_Announce_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Discovery_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Discovery_Get_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _Discovery_AddMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _Discovery_DeleteMetadata_Handler,
		},
		{
			MethodName: "GetByAppID",
			Handler:    _Discovery_GetByAppID_Handler,
		},
		{
			MethodName: "GetByGatewayID",
			Handler:    _Discovery_GetByGatewayID_Handler,
		},
		{
			MethodName: "GetByAppEUI",
			Handler:    _Discovery_GetByAppEUI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/discovery/discovery.proto",
}

// DiscoveryManagerClient is the client API for DiscoveryManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryManagerClient interface {
}

type discoveryManagerClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryManagerClient(cc *grpc.ClientConn) DiscoveryManagerClient {
	return &discoveryManagerClient{cc}
}

// DiscoveryManagerServer is the server API for DiscoveryManager service.
type DiscoveryManagerServer interface {
}

// UnimplementedDiscoveryManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryManagerServer struct {
}

func RegisterDiscoveryManagerServer(s *grpc.Server, srv DiscoveryManagerServer) {
	s.RegisterService(&_DiscoveryManager_serviceDesc, srv)
}

var _DiscoveryManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.DiscoveryManager",
	HandlerType: (*DiscoveryManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "github.com/TheThingsNetwork/api/discovery/discovery.proto",
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size := m.Metadata.Size()
			i -= size
			if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Metadata_GatewayId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata_GatewayId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.GatewayId)
	copy(dAtA[i:], m.GatewayId)
	i = encodeVarintDiscovery(dAtA, i, uint64(len(m.GatewayId)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *Metadata_DevAddrPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata_DevAddrPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DevAddrPrefix != nil {
		i -= len(m.DevAddrPrefix)
		copy(dAtA[i:], m.DevAddrPrefix)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.DevAddrPrefix)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Metadata_AppId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata_AppId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppId)
	copy(dAtA[i:], m.AppId)
	i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppId)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	return len(dAtA) - i, nil
}
func (m *Metadata_AppEui) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata_AppEui) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppEui != nil {
		i -= len(m.AppEui)
		copy(dAtA[i:], m.AppEui)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppEui)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *Announcement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Announcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Announcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.AmqpAddress) > 0 {
		i -= len(m.AmqpAddress)
		copy(dAtA[i:], m.AmqpAddress)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AmqpAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.MqttAddress) > 0 {
		i -= len(m.MqttAddress)
		copy(dAtA[i:], m.MqttAddress)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.MqttAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ApiAddress) > 0 {
		i -= len(m.ApiAddress)
		copy(dAtA[i:], m.ApiAddress)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ApiAddress)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.NetAddress) > 0 {
		i -= len(m.NetAddress)
		copy(dAtA[i:], m.NetAddress)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.NetAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Public {
		i--
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceVersion) > 0 {
		i -= len(m.ServiceVersion)
		copy(dAtA[i:], m.ServiceVersion)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDiscovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnnouncementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnouncementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnnouncementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDiscovery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetByAppIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByAppIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByAppIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}

func (m *GetByGatewayIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByGatewayIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByGatewayIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayId) > 0 {
		i -= len(m.GatewayId)
		copy(dAtA[i:], m.GatewayId)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.GatewayId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}

func (m *GetByAppEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetByAppEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetByAppEUIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppEui) > 0 {
		i -= len(m.AppEui)
		copy(dAtA[i:], m.AppEui)
		i = encodeVarintDiscovery(dAtA, i, uint64(len(m.AppEui)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiscovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiscovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMetadata(r randyDiscovery, easy bool) *Metadata {
	this := &Metadata{}
	oneofNumber_Metadata := []int32{10, 20, 30, 31}[r.Intn(4)]
	switch oneofNumber_Metadata {
	case 10:
		this.Metadata = NewPopulatedMetadata_GatewayId(r, easy)
	case 20:
		this.Metadata = NewPopulatedMetadata_DevAddrPrefix(r, easy)
	case 30:
		this.Metadata = NewPopulatedMetadata_AppId(r, easy)
	case 31:
		this.Metadata = NewPopulatedMetadata_AppEui(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetadata_GatewayId(r randyDiscovery, easy bool) *Metadata_GatewayId {
	this := &Metadata_GatewayId{}
	this.GatewayId = string(randStringDiscovery(r))
	return this
}
func NewPopulatedMetadata_DevAddrPrefix(r randyDiscovery, easy bool) *Metadata_DevAddrPrefix {
	this := &Metadata_DevAddrPrefix{}
	v1 := r.Intn(100)
	this.DevAddrPrefix = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.DevAddrPrefix[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedMetadata_AppId(r randyDiscovery, easy bool) *Metadata_AppId {
	this := &Metadata_AppId{}
	this.AppId = string(randStringDiscovery(r))
	return this
}
func NewPopulatedMetadata_AppEui(r randyDiscovery, easy bool) *Metadata_AppEui {
	this := &Metadata_AppEui{}
	v2 := r.Intn(100)
	this.AppEui = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.AppEui[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedAnnouncement(r randyDiscovery, easy bool) *Announcement {
	this := &Announcement{}
	this.Id = string(randStringDiscovery(r))
	this.ServiceName = string(randStringDiscovery(r))
	this.ServiceVersion = string(randStringDiscovery(r))
	this.Description = string(randStringDiscovery(r))
	this.Url = string(randStringDiscovery(r))
	this.Public = bool(bool(r.Intn(2) == 0))
	this.NetAddress = string(randStringDiscovery(r))
	this.PublicKey = string(randStringDiscovery(r))
	this.Certificate = string(randStringDiscovery(r))
	this.ApiAddress = string(randStringDiscovery(r))
	this.MqttAddress = string(randStringDiscovery(r))
	this.AmqpAddress = string(randStringDiscovery(r))
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Metadata = make([]*Metadata, v3)
		for i := 0; i < v3; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetServiceRequest(r randyDiscovery, easy bool) *GetServiceRequest {
	this := &GetServiceRequest{}
	this.ServiceName = string(randStringDiscovery(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRequest(r randyDiscovery, easy bool) *GetRequest {
	this := &GetRequest{}
	this.Id = string(randStringDiscovery(r))
	this.ServiceName = string(randStringDiscovery(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetadataRequest(r randyDiscovery, easy bool) *MetadataRequest {
	this := &MetadataRequest{}
	this.Id = string(randStringDiscovery(r))
	this.ServiceName = string(randStringDiscovery(r))
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAnnouncementsResponse(r randyDiscovery, easy bool) *AnnouncementsResponse {
	this := &AnnouncementsResponse{}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Services = make([]*Announcement, v4)
		for i := 0; i < v4; i++ {
			this.Services[i] = NewPopulatedAnnouncement(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetByAppIDRequest(r randyDiscovery, easy bool) *GetByAppIDRequest {
	this := &GetByAppIDRequest{}
	this.AppId = string(randStringDiscovery(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetByGatewayIDRequest(r randyDiscovery, easy bool) *GetByGatewayIDRequest {
	this := &GetByGatewayIDRequest{}
	this.GatewayId = string(randStringDiscovery(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetByAppEUIRequest(r randyDiscovery, easy bool) *GetByAppEUIRequest {
	this := &GetByAppEUIRequest{}
	v5 := r.Intn(100)
	this.AppEui = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.AppEui[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDiscovery interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDiscovery(r randyDiscovery) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDiscovery(r randyDiscovery) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneDiscovery(r)
	}
	return string(tmps)
}
func randUnrecognizedDiscovery(r randyDiscovery, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDiscovery(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDiscovery(dAtA []byte, r randyDiscovery, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDiscovery(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateDiscovery(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateDiscovery(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDiscovery(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDiscovery(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDiscovery(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDiscovery(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	return n
}

func (m *Metadata_GatewayId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayId)
	n += 1 + l + sovDiscovery(uint64(l))
	return n
}
func (m *Metadata_DevAddrPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DevAddrPrefix != nil {
		l = len(m.DevAddrPrefix)
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}
func (m *Metadata_AppId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	n += 2 + l + sovDiscovery(uint64(l))
	return n
}
func (m *Metadata_AppEui) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppEui != nil {
		l = len(m.AppEui)
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}
func (m *Announcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceVersion)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	if m.Public {
		n += 2
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ApiAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.MqttAddress)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.AmqpAddress)
	if l > 0 {
		n += 2 + l + sovDiscovery(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 2 + l + sovDiscovery(uint64(l))
		}
	}
	return n
}

func (m *GetServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *MetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovDiscovery(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *AnnouncementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovDiscovery(uint64(l))
		}
	}
	return n
}

func (m *GetByAppIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *GetByGatewayIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayId)
	if l > 0 {
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}

func (m *GetByAppEUIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppEui)
	if l > 0 {
		n += 2 + l + sovDiscovery(uint64(l))
	}
	return n
}

func sovDiscovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiscovery(x uint64) (n int) {
	return sovDiscovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Metadata:` + fmt.Sprintf("%v", this.Metadata) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_GatewayId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_GatewayId{`,
		`GatewayId:` + fmt.Sprintf("%v", this.GatewayId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_DevAddrPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_DevAddrPrefix{`,
		`DevAddrPrefix:` + fmt.Sprintf("%v", this.DevAddrPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_AppId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_AppId{`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata_AppEui) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata_AppEui{`,
		`AppEui:` + fmt.Sprintf("%v", this.AppEui) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Announcement) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadata := "[]*Metadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(f.String(), "Metadata", "Metadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&Announcement{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`ServiceVersion:` + fmt.Sprintf("%v", this.ServiceVersion) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Public:` + fmt.Sprintf("%v", this.Public) + `,`,
		`NetAddress:` + fmt.Sprintf("%v", this.NetAddress) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Certificate:` + fmt.Sprintf("%v", this.Certificate) + `,`,
		`ApiAddress:` + fmt.Sprintf("%v", this.ApiAddress) + `,`,
		`MqttAddress:` + fmt.Sprintf("%v", this.MqttAddress) + `,`,
		`AmqpAddress:` + fmt.Sprintf("%v", this.AmqpAddress) + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetServiceRequest{`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "Metadata", "Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnnouncementsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServices := "[]*Announcement{"
	for _, f := range this.Services {
		repeatedStringForServices += strings.Replace(f.String(), "Announcement", "Announcement", 1) + ","
	}
	repeatedStringForServices += "}"
	s := strings.Join([]string{`&AnnouncementsResponse{`,
		`Services:` + repeatedStringForServices + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetByAppIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetByAppIDRequest{`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetByGatewayIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetByGatewayIDRequest{`,
		`GatewayId:` + fmt.Sprintf("%v", this.GatewayId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetByAppEUIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetByAppEUIRequest{`,
		`AppEui:` + fmt.Sprintf("%v", this.AppEui) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDiscovery(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = &Metadata_GatewayId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Metadata = &Metadata_DevAddrPrefix{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = &Metadata_AppId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Metadata = &Metadata_AppEui{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Announcement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Announcement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Announcement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MqttAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MqttAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmqpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnouncementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnouncementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnouncementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Announcement{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByAppIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByAppIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByAppIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByGatewayIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByGatewayIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByGatewayIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetByAppEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetByAppEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetByAppEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEui", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEui = append(m.AppEui[:0], dAtA[iNdEx:postIndex]...)
			if m.AppEui == nil {
				m.AppEui = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiscovery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDiscovery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDiscovery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDiscovery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscovery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDiscovery = fmt.Errorf("proto: unexpected end of group")
)
