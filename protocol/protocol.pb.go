// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/protocol/protocol.proto

package protocol

import (
	fmt "fmt"
	lorawan "github.com/TheThingsNetwork/api/protocol/lorawan"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Protocol:
	//	*Message_Lorawan
	Protocol             isMessage_Protocol `protobuf_oneof:"protocol"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c1910b3f3fb818, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Protocol interface {
	isMessage_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Lorawan struct {
	Lorawan *lorawan.Message `protobuf:"bytes,1,opt,name=lorawan,proto3,oneof" json:"lorawan,omitempty"`
}

func (*Message_Lorawan) isMessage_Protocol() {}

func (m *Message) GetProtocol() isMessage_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Message) GetLorawan() *lorawan.Message {
	if x, ok := m.GetProtocol().(*Message_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Lorawan)(nil),
	}
}

type RxMetadata struct {
	// Types that are valid to be assigned to Protocol:
	//	*RxMetadata_Lorawan
	Protocol             isRxMetadata_Protocol `protobuf_oneof:"protocol"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RxMetadata) Reset()      { *m = RxMetadata{} }
func (*RxMetadata) ProtoMessage() {}
func (*RxMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c1910b3f3fb818, []int{1}
}
func (m *RxMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RxMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RxMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RxMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RxMetadata.Merge(m, src)
}
func (m *RxMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RxMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RxMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RxMetadata proto.InternalMessageInfo

type isRxMetadata_Protocol interface {
	isRxMetadata_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RxMetadata_Lorawan struct {
	Lorawan *lorawan.Metadata `protobuf:"bytes,1,opt,name=lorawan,proto3,oneof" json:"lorawan,omitempty"`
}

func (*RxMetadata_Lorawan) isRxMetadata_Protocol() {}

func (m *RxMetadata) GetProtocol() isRxMetadata_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *RxMetadata) GetLorawan() *lorawan.Metadata {
	if x, ok := m.GetProtocol().(*RxMetadata_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RxMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RxMetadata_Lorawan)(nil),
	}
}

type TxConfiguration struct {
	// Types that are valid to be assigned to Protocol:
	//	*TxConfiguration_Lorawan
	Protocol             isTxConfiguration_Protocol `protobuf_oneof:"protocol"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TxConfiguration) Reset()      { *m = TxConfiguration{} }
func (*TxConfiguration) ProtoMessage() {}
func (*TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c1910b3f3fb818, []int{2}
}
func (m *TxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxConfiguration.Merge(m, src)
}
func (m *TxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TxConfiguration proto.InternalMessageInfo

type isTxConfiguration_Protocol interface {
	isTxConfiguration_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TxConfiguration_Lorawan struct {
	Lorawan *lorawan.TxConfiguration `protobuf:"bytes,1,opt,name=lorawan,proto3,oneof" json:"lorawan,omitempty"`
}

func (*TxConfiguration_Lorawan) isTxConfiguration_Protocol() {}

func (m *TxConfiguration) GetProtocol() isTxConfiguration_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *TxConfiguration) GetLorawan() *lorawan.TxConfiguration {
	if x, ok := m.GetProtocol().(*TxConfiguration_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TxConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TxConfiguration_Lorawan)(nil),
	}
}

type ActivationMetadata struct {
	// Types that are valid to be assigned to Protocol:
	//	*ActivationMetadata_Lorawan
	Protocol             isActivationMetadata_Protocol `protobuf_oneof:"protocol"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ActivationMetadata) Reset()      { *m = ActivationMetadata{} }
func (*ActivationMetadata) ProtoMessage() {}
func (*ActivationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c1910b3f3fb818, []int{3}
}
func (m *ActivationMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationMetadata.Merge(m, src)
}
func (m *ActivationMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ActivationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationMetadata proto.InternalMessageInfo

type isActivationMetadata_Protocol interface {
	isActivationMetadata_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActivationMetadata_Lorawan struct {
	Lorawan *lorawan.ActivationMetadata `protobuf:"bytes,1,opt,name=lorawan,proto3,oneof" json:"lorawan,omitempty"`
}

func (*ActivationMetadata_Lorawan) isActivationMetadata_Protocol() {}

func (m *ActivationMetadata) GetProtocol() isActivationMetadata_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *ActivationMetadata) GetLorawan() *lorawan.ActivationMetadata {
	if x, ok := m.GetProtocol().(*ActivationMetadata_Lorawan); ok {
		return x.Lorawan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActivationMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActivationMetadata_Lorawan)(nil),
	}
}

func init() {
	proto.RegisterType((*Message)(nil), "protocol.Message")
	golang_proto.RegisterType((*Message)(nil), "protocol.Message")
	proto.RegisterType((*RxMetadata)(nil), "protocol.RxMetadata")
	golang_proto.RegisterType((*RxMetadata)(nil), "protocol.RxMetadata")
	proto.RegisterType((*TxConfiguration)(nil), "protocol.TxConfiguration")
	golang_proto.RegisterType((*TxConfiguration)(nil), "protocol.TxConfiguration")
	proto.RegisterType((*ActivationMetadata)(nil), "protocol.ActivationMetadata")
	golang_proto.RegisterType((*ActivationMetadata)(nil), "protocol.ActivationMetadata")
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/protocol.proto", fileDescriptor_31c1910b3f3fb818)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/protocol/protocol.proto", fileDescriptor_31c1910b3f3fb818)
}

var fileDescriptor_31c1910b3f3fb818 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x88, 0x1a, 0x41,
	0x14, 0x86, 0xdf, 0x4b, 0x11, 0xc3, 0x84, 0x90, 0x64, 0x2b, 0x49, 0xc8, 0x23, 0xb1, 0xb2, 0x48,
	0x46, 0x48, 0x02, 0x76, 0x01, 0xb5, 0x48, 0x52, 0x78, 0x88, 0x67, 0x73, 0xd7, 0x8d, 0xde, 0xde,
	0xee, 0x72, 0xde, 0x8e, 0xac, 0xe3, 0x69, 0x69, 0x69, 0x79, 0xe5, 0x95, 0x57, 0xca, 0x55, 0x96,
	0x96, 0x96, 0x96, 0x96, 0x96, 0xee, 0x4c, 0x63, 0x29, 0x57, 0x59, 0x1e, 0xac, 0xee, 0x72, 0xec,
	0x21, 0x58, 0xbd, 0x7f, 0x78, 0x1f, 0x1f, 0x3f, 0xbc, 0x61, 0x45, 0xc7, 0x53, 0x6e, 0xaf, 0xc9,
	0x5b, 0xf2, 0xba, 0xd0, 0x70, 0xed, 0x86, 0xeb, 0xf9, 0x4e, 0xf7, 0xc4, 0x56, 0x7d, 0x19, 0x5c,
	0x15, 0x44, 0xc7, 0x2b, 0x74, 0x02, 0xa9, 0x64, 0x4b, 0xb6, 0x93, 0xc0, 0xa3, 0x60, 0xbd, 0x89,
	0xdf, 0x9f, 0xfe, 0x1c, 0xad, 0x68, 0xcb, 0x40, 0xf4, 0x85, 0x1f, 0xcf, 0x9d, 0x29, 0x57, 0x61,
	0x99, 0xaa, 0xdd, 0xed, 0x0a, 0xc7, 0xb6, 0xbe, 0xb3, 0xcc, 0x7e, 0x97, 0xc5, 0xaf, 0x98, 0x7f,
	0xfb, 0xf3, 0x03, 0x8f, 0xd9, 0x3d, 0xf2, 0x0f, 0xea, 0x31, 0x52, 0x66, 0x2c, 0x29, 0x91, 0xfb,
	0xcb, 0x58, 0x7d, 0x50, 0xb5, 0x95, 0xb8, 0x10, 0x4a, 0x58, 0x3f, 0xd2, 0x9e, 0x8f, 0xcf, 0x3c,
	0x3b, 0xe6, 0x90, 0xe8, 0x94, 0xbd, 0x6f, 0x0c, 0x2a, 0xd2, 0xbf, 0xf4, 0x9c, 0x5e, 0x20, 0x94,
	0x27, 0x7d, 0xeb, 0x77, 0xda, 0x96, 0x4d, 0x6c, 0x29, 0xf4, 0x90, 0xf4, 0x8c, 0x59, 0xa5, 0x96,
	0xf2, 0x6e, 0x22, 0x28, 0x69, 0x59, 0x4c, 0x7b, 0x3f, 0x27, 0xde, 0x97, 0xf4, 0x01, 0x75, 0xf9,
	0x11, 0xe7, 0x21, 0xe1, 0x22, 0x24, 0x5c, 0x86, 0x04, 0xab, 0x90, 0x60, 0x1d, 0x12, 0x6c, 0x42,
	0x82, 0x6d, 0x48, 0x38, 0xd4, 0x84, 0x23, 0x4d, 0x30, 0xd6, 0x84, 0x13, 0x4d, 0x30, 0xd5, 0x04,
	0x33, 0x4d, 0x30, 0xd7, 0x84, 0x0b, 0x4d, 0xb8, 0xd4, 0x04, 0x2b, 0x4d, 0xb8, 0xd6, 0x04, 0x1b,
	0x4d, 0xb8, 0xd5, 0x04, 0x43, 0x43, 0x30, 0x32, 0x84, 0xb7, 0x86, 0xe0, 0xce, 0x10, 0xde, 0x1b,
	0x82, 0xb1, 0x21, 0x98, 0x18, 0xc2, 0xa9, 0x21, 0x9c, 0x19, 0x42, 0xf6, 0x4d, 0x06, 0x0e, 0x57,
	0xae, 0xad, 0xa2, 0x6b, 0xfb, 0xbb, 0x6b, 0x73, 0xd1, 0xf1, 0x78, 0xd2, 0xec, 0x5d, 0x6d, 0x9f,
	0xa2, 0x59, 0xc3, 0xf3, 0xfc, 0xb1, 0x1f, 0xe5, 0xe1, 0xd5, 0x97, 0xf4, 0x9e, 0x97, 0x6a, 0xff,
	0x79, 0x2c, 0x6c, 0xbe, 0x8e, 0xc8, 0x5f, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0xad, 0xa7,
	0xf8, 0xbe, 0x02, 0x00, 0x00,
}

func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	return true
}
func (this *Message_Lorawan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Lorawan)
	if !ok {
		that2, ok := that.(Message_Lorawan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Lorawan.Equal(that1.Lorawan) {
		return false
	}
	return true
}
func (this *RxMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RxMetadata)
	if !ok {
		that2, ok := that.(RxMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	return true
}
func (this *RxMetadata_Lorawan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RxMetadata_Lorawan)
	if !ok {
		that2, ok := that.(RxMetadata_Lorawan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Lorawan.Equal(that1.Lorawan) {
		return false
	}
	return true
}
func (this *TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxConfiguration)
	if !ok {
		that2, ok := that.(TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	return true
}
func (this *TxConfiguration_Lorawan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxConfiguration_Lorawan)
	if !ok {
		that2, ok := that.(TxConfiguration_Lorawan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Lorawan.Equal(that1.Lorawan) {
		return false
	}
	return true
}
func (this *ActivationMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationMetadata)
	if !ok {
		that2, ok := that.(ActivationMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	return true
}
func (this *ActivationMetadata_Lorawan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationMetadata_Lorawan)
	if !ok {
		that2, ok := that.(ActivationMetadata_Lorawan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Lorawan.Equal(that1.Lorawan) {
		return false
	}
	return true
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Lorawan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Lorawan != nil {
		{
			size, err := m.Lorawan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RxMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RxMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RxMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RxMetadata_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RxMetadata_Lorawan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Lorawan != nil {
		{
			size, err := m.Lorawan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TxConfiguration_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxConfiguration_Lorawan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Lorawan != nil {
		{
			size, err := m.Lorawan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ActivationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivationMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivationMetadata_Lorawan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivationMetadata_Lorawan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Lorawan != nil {
		{
			size, err := m.Lorawan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMessage(r randyProtocol, easy bool) *Message {
	this := &Message{}
	oneofNumber_Protocol := []int32{1}[r.Intn(1)]
	switch oneofNumber_Protocol {
	case 1:
		this.Protocol = NewPopulatedMessage_Lorawan(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessage_Lorawan(r randyProtocol, easy bool) *Message_Lorawan {
	this := &Message_Lorawan{}
	this.Lorawan = lorawan.NewPopulatedMessage(r, easy)
	return this
}
func NewPopulatedRxMetadata(r randyProtocol, easy bool) *RxMetadata {
	this := &RxMetadata{}
	oneofNumber_Protocol := []int32{1}[r.Intn(1)]
	switch oneofNumber_Protocol {
	case 1:
		this.Protocol = NewPopulatedRxMetadata_Lorawan(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRxMetadata_Lorawan(r randyProtocol, easy bool) *RxMetadata_Lorawan {
	this := &RxMetadata_Lorawan{}
	this.Lorawan = lorawan.NewPopulatedMetadata(r, easy)
	return this
}
func NewPopulatedTxConfiguration(r randyProtocol, easy bool) *TxConfiguration {
	this := &TxConfiguration{}
	oneofNumber_Protocol := []int32{1}[r.Intn(1)]
	switch oneofNumber_Protocol {
	case 1:
		this.Protocol = NewPopulatedTxConfiguration_Lorawan(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTxConfiguration_Lorawan(r randyProtocol, easy bool) *TxConfiguration_Lorawan {
	this := &TxConfiguration_Lorawan{}
	this.Lorawan = lorawan.NewPopulatedTxConfiguration(r, easy)
	return this
}
func NewPopulatedActivationMetadata(r randyProtocol, easy bool) *ActivationMetadata {
	this := &ActivationMetadata{}
	oneofNumber_Protocol := []int32{1}[r.Intn(1)]
	switch oneofNumber_Protocol {
	case 1:
		this.Protocol = NewPopulatedActivationMetadata_Lorawan(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedActivationMetadata_Lorawan(r randyProtocol, easy bool) *ActivationMetadata_Lorawan {
	this := &ActivationMetadata_Lorawan{}
	this.Lorawan = lorawan.NewPopulatedActivationMetadata(r, easy)
	return this
}

type randyProtocol interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProtocol(r randyProtocol) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProtocol(r randyProtocol) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneProtocol(r)
	}
	return string(tmps)
}
func randUnrecognizedProtocol(r randyProtocol, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProtocol(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProtocol(dAtA []byte, r randyProtocol, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProtocol(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *Message_Lorawan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *RxMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *RxMetadata_Lorawan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *TxConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *TxConfiguration_Lorawan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ActivationMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	return n
}

func (m *ActivationMetadata_Lorawan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lorawan != nil {
		l = m.Lorawan.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Lorawan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Lorawan{`,
		`Lorawan:` + strings.Replace(fmt.Sprintf("%v", this.Lorawan), "Message", "lorawan.Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RxMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RxMetadata{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RxMetadata_Lorawan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RxMetadata_Lorawan{`,
		`Lorawan:` + strings.Replace(fmt.Sprintf("%v", this.Lorawan), "Metadata", "lorawan.Metadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxConfiguration{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxConfiguration_Lorawan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxConfiguration_Lorawan{`,
		`Lorawan:` + strings.Replace(fmt.Sprintf("%v", this.Lorawan), "TxConfiguration", "lorawan.TxConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationMetadata{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationMetadata_Lorawan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationMetadata_Lorawan{`,
		`Lorawan:` + strings.Replace(fmt.Sprintf("%v", this.Lorawan), "ActivationMetadata", "lorawan.ActivationMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProtocol(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &Message_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RxMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.Metadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &RxMetadata_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.TxConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &TxConfiguration_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lorawan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan.ActivationMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ActivationMetadata_Lorawan{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
